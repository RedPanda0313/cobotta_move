/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2022-07-04 20:19:13.701474
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((0.165)*x4);
x13=((1.0)*x11);
x14=((0.0125)*x10);
x15=((0.0645)*x6);
x16=((0.128)*x0);
x17=((0.0645)*x7);
x18=((0.0125)*x6);
x19=((1.0)*x10);
x20=((0.012)*x0);
x21=((0.0645)*x0);
x22=((0.1775)*x7);
x23=((0.012)*x7);
x24=((1.0)*x7);
x25=((0.0125)*x11);
x26=((1.0)*x0);
x27=((0.128)*x7);
x28=((0.1775)*x0);
x29=((0.0125)*x5);
x30=(x1*x2);
x31=(x3*x4);
x32=(x5*x7);
x33=(x2*x4);
x34=(x10*x6);
x35=(x5*x8);
x36=((-0.128)*x6);
x37=(x0*x5);
x38=(x1*x3);
x39=((-0.0125)*x5);
x40=(x5*x9);
x41=(x0*x6);
x42=(x18*x7);
x43=((1.0)*x38);
x44=(x26*x33);
x45=(x24*x33);
x46=((((-1.0)*x43))+x33);
x47=((((1.0)*x31))+(((1.0)*x30)));
x48=((-1.0)*x47);
x49=((((0.0125)*x31))+(((0.0125)*x30)));
x50=((((-1.0)*x44))+((x0*x38)));
x51=((((-1.0)*x45))+((x38*x7)));
x52=(x48*x6);
x53=(x11*x48);
x54=(x44+(((-1.0)*x26*x38)));
x55=(x45+(((-1.0)*x24*x38)));
x56=(x26*(((((-1.0)*x31))+(((-1.0)*x30)))));
x57=(x26*((x31+x30)));
x58=(x24*(((((-1.0)*x31))+(((-1.0)*x30)))));
x59=(x24*((x31+x30)));
x60=(x50*x6);
x61=(x5*x54);
x62=(x5*x55);
x63=(x10*x56);
x64=(x10*x58);
x65=((((-1.0)*x24*x5))+x60);
x66=(((x51*x6))+x37);
x67=((((-1.0)*x24*x6))+x61);
x68=(x41+x62);
x69=(x11*x65);
x70=(x11*x66);
x71=((((-1.0)*x18*x53))+(((-1.0)*x14*x46)));
x72=((((-1.0)*x25*x65))+(((-1.0)*x14*x56)));
x73=((((-1.0)*x25*x66))+(((-1.0)*x14*x58)));
eerot[0]=(((x8*((x63+x69))))+((x67*x9)));
eerot[1]=(((x9*(((((-1.0)*x19*x56))+(((-1.0)*x13*x65))))))+((x67*x8)));
eerot[2]=(((x11*x57))+((x10*x65)));
IkReal x74=((1.0)*x16);
eetrans[0]=(((x20*x33))+(((-1.0)*x20*x38))+((x0*x12))+((x10*((((x27*x5))+((x36*x50))))))+((x28*x30))+((x28*x31))+((x5*((((x21*x38))+(((-1.0)*x21*x33))))))+((x11*(((((-1.0)*x31*x74))+(((-1.0)*x30*x74))))))+((x9*((((x39*x54))+x42))))+(((-0.02)*x7))+((x72*x9))+((x72*x8))+((x8*(((((-1.0)*x42))+((x29*x54))))))+((x15*x7)));
eerot[3]=(((x68*x9))+((x8*((x70+x64)))));
eerot[4]=(((x68*x8))+((x9*(((((-1.0)*x19*x58))+(((-1.0)*x13*x66)))))));
eerot[5]=(((x11*x59))+((x10*x66)));
IkReal x75=((1.0)*x27);
eetrans[1]=(((x10*((((x36*x51))+(((-0.128)*x37))))))+((x8*((((x0*x18))+((x29*x55))))))+((x9*((((x39*x55))+(((-0.0125)*x41))))))+((x23*x33))+(((-1.0)*x0*x15))+((x11*(((((-1.0)*x31*x75))+(((-1.0)*x30*x75))))))+(((0.02)*x0))+((x22*x30))+((x22*x31))+((x73*x9))+((x73*x8))+((x5*((((x17*x38))+(((-1.0)*x17*x33))))))+(((-1.0)*x23*x38))+((x12*x7)));
eerot[6]=(((x40*x47))+((x8*((((x10*x46))+((x11*x52)))))));
eerot[7]=(((x35*x47))+((x9*(((((-1.0)*x19*x46))+(((-1.0)*x13*x52)))))));
eerot[8]=(((x34*x48))+((x11*(((((-1.0)*x33))+x43)))));
eetrans[2]=((0.18)+(((0.1775)*x38))+((x71*x8))+((x71*x9))+((x34*(((((0.128)*x30))+(((0.128)*x31))))))+((x35*x49))+(((-1.0)*x40*x49))+((x11*(((((0.128)*x33))+(((-0.128)*x38))))))+(((0.165)*x1))+((x5*(((((-0.0645)*x30))+(((-0.0645)*x31))))))+(((0.012)*x30))+(((0.012)*x31))+(((-0.1775)*x33)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((0.0125)*r00))+(((-0.0125)*r01))+px+(((0.128)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((0.0125)*r10))+(((-0.0125)*r11))+py+(((0.128)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.18)+(((-0.0125)*r21))+pz+(((0.0125)*r20))+(((0.128)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x76=((1.0)*px);
IkReal x77=((1.0)*pz);
IkReal x78=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x78))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x77)));
rxp0_2=((((-1.0)*r10*x76))+((py*r00)));
rxp1_0=((((-1.0)*r21*x78))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x77)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x76)));
rxp2_0=((((-1.0)*r22*x78))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x77)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x76)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x79=((6.45)*r10);
IkReal x80=((50.0)*py);
IkReal x81=((3.225)*r11);
IkReal x82=((0.129)*px);
IkReal x83=((0.0222083553842387)*npy);
IkReal x84=((0.000595621361600619)*r21);
IkReal x85=((0.32849859005853)*rxp1_1);
IkReal x86=((0.04)*rxp1_2);
IkReal x87=((0.00814523264034249)*r01);
IkReal x88=((0.000444167107684773)*r11);
IkReal x89=((0.00814523264034249)*r21);
IkReal x90=((0.000595621361600619)*r01);
IkReal x91=((0.00150140994146966)*npy);
IkReal x92=((0.0222083553842387)*rxp1_1);
IkReal x93=((0.129)*pz);
IkReal x94=((0.04)*rxp1_0);
IkReal x95=((3.00281988293931e-5)*r11);
IkReal x96=(pp*r21);
IkReal x97=(pp*r01);
IkReal x98=((0.08)*rxp0_0);
IkReal x99=((0.0444167107684773)*rxp0_1);
IkReal x100=((0.00300281988293931)*npx);
IkReal x101=((0.00119124272320124)*r00);
IkReal x102=((0.016290465280685)*r20);
IkReal x103=((6.00563976587863e-5)*r10);
IkReal x104=((0.000888334215369547)*r10);
IkReal x105=((0.00119124272320124)*r20);
IkReal x106=((0.656997180117061)*rxp0_1);
IkReal x107=((0.016290465280685)*r00);
IkReal x108=((0.08)*rxp0_2);
IkReal x109=((0.0444167107684773)*npx);
IkReal x110=((6.45)*r01);
IkReal x111=((100.0)*px);
IkReal x112=((0.000888334215369547)*r01);
IkReal x113=((0.258)*py);
IkReal x114=((0.656997180117061)*rxp1_0);
IkReal x115=((0.016290465280685)*r11);
IkReal x116=((0.08)*rxp1_1);
IkReal x117=((6.00563976587863e-5)*r01);
IkReal x118=((0.00119124272320124)*r11);
IkReal x119=((0.0444167107684773)*rxp1_0);
IkReal x120=((0.16)*rxp0_1);
IkReal x121=((0.000120112795317573)*r00);
IkReal x122=((0.00238248544640248)*r10);
IkReal x123=((0.0888334215369547)*rxp0_0);
IkReal x124=((1.31399436023412)*rxp0_0);
IkReal x125=((0.03258093056137)*r10);
IkReal x126=((0.00177666843073909)*r00);
IkReal x127=((2.0)*pp);
IkReal x128=((4.0)*npx);
IkReal x129=((2.0)*npy);
IkReal x130=(px*x129);
IkReal x131=(pz*x129);
IkReal x132=(r20*x127);
IkReal x133=(pz*x128);
IkReal x134=(r00*x127);
IkReal x135=(px*x128);
IkReal x136=((1.0)*x96);
IkReal x137=((1.0)*x97);
IkReal x138=((-12.9)*r00);
IkReal x139=((((-1.0)*x111))+x110);
IkReal x140=(r11*x127);
IkReal x141=((4.0)*npy*py);
IkReal x142=((4.0)*pp*r10);
IkReal x143=((8.0)*npx*py);
IkReal x144=((-6.45)*r10);
IkReal x145=((-1.0)+x80);
IkReal x146=((-0.00143243892228339)+x83);
IkReal x147=((-0.00143243892228339)+x82);
IkReal x148=((9.68409412247928e-5)+x92);
IkReal x149=((-9.68409412247928e-5)+x92);
IkReal x150=((-9.68409412247928e-5)+x95);
IkReal x151=((-0.00143243892228339)+x97);
IkReal x152=(x145+(((-1.0)*x81)));
IkReal x153=((((-1.0)*x111))+(((-1.0)*x110)));
IkReal x154=(x117+x118);
IkReal x155=(x116+x119);
IkReal x156=(x119+x118);
IkReal x157=(x117+x116);
IkReal x158=((-1.0)+(((-1.0)*x81))+(((-1.0)*x80)));
IkReal x159=((-1.0)+x81+(((-1.0)*x80)));
IkReal x160=(x88+x86);
IkReal x161=(x83+x97);
IkReal x162=(x91+x94);
IkReal x163=(x93+x95);
IkReal x164=(x113+x114);
IkReal x165=(x86+x85);
IkReal x166=(x100+x98);
IkReal x167=(x91+x90);
IkReal x168=(x108+x106);
IkReal x169=(x100+x101);
IkReal x170=(x108+x104);
IkReal x171=(x88+x84);
IkReal x172=(x84+x85);
IkReal x173=(x93+x92);
IkReal x174=(x145+x81);
IkReal x175=(x137+x83);
IkReal x176=(x130+x87);
IkReal x177=(x132+x99);
IkReal x178=(x131+x89);
IkReal x179=(x141+x115);
IkReal x180=((9.68409412247928e-5)+x90+x95);
IkReal x181=(x133+x102);
IkReal x182=(x134+x105);
IkReal x183=(x140+x112);
IkReal x184=(x143+x125);
IkReal x185=(x135+x107);
IkReal x186=(x132+x103);
IkReal x187=(x171+x82);
IkReal x188=(x172+x147);
IkReal x189=(x173+x136);
op[0]=x174;
op[1]=x174;
op[2]=x79;
op[3]=x79;
op[4]=x152;
op[5]=x152;
op[6]=((((-1.0)*x175))+(((-1.0)*x172))+x176+x160+x147);
op[7]=((((-1.0)*x167))+(((-1.0)*x178))+(((-1.0)*x173))+x150+x94+x96);
op[8]=((((-1.0)*x182))+(((-1.0)*x109))+(((-1.0)*x106))+x170+x185);
op[9]=((((-1.0)*x169))+(((-1.0)*x181))+x186+x98+(((-1.0)*x99)));
op[10]=((((-1.0)*x160))+(((-1.0)*x176))+x172+x146+x82+x97);
op[11]=((((-1.0)*x163))+x178+x167+x149+(((-1.0)*x136))+(((-1.0)*x94)));
op[12]=((((-1.0)*x163))+(((-1.0)*x178))+x162+x148+x96+(((-1.0)*x90)));
op[13]=((((-1.0)*x165))+(((-1.0)*x176))+x171+x151+(((-1.0)*x83))+(((-1.0)*x82)));
op[14]=((((-1.0)*x181))+(((-1.0)*x101))+(((-1.0)*x103))+x177+x166);
op[15]=((((-1.0)*x168))+(((-1.0)*x185))+(((-1.0)*x109))+x104+x182);
op[16]=((((-1.0)*x162))+(((-1.0)*x189))+x178+x180);
op[17]=((((-1.0)*x187))+x176+x165+x146+(((-1.0)*x137)));
op[18]=0;
op[19]=x174;
op[20]=0;
op[21]=x79;
op[22]=0;
op[23]=x152;
op[24]=x153;
op[25]=x153;
op[26]=x138;
op[27]=x138;
op[28]=x139;
op[29]=x139;
op[30]=((((-1.0)*x183))+x179+x164);
op[31]=((((-1.0)*x154))+x155);
op[32]=((((-1.0)*x142))+(((-1.0)*x126))+x124+x184);
op[33]=((((-1.0)*x121))+(((-1.0)*x122))+x123+x120);
op[34]=((((-1.0)*x179))+(((-1.0)*x114))+x113+x183);
op[35]=((((-1.0)*x155))+x154);
op[36]=((((-1.0)*x156))+x157);
op[37]=((((-1.0)*x179))+(((-1.0)*x112))+(((-1.0)*x113))+x140+x114);
op[38]=((((-1.0)*x123))+(((-1.0)*x122))+x120+x121);
op[39]=((((-1.0)*x184))+(((-1.0)*x126))+x142+x124);
op[40]=((((-1.0)*x157))+x156);
op[41]=((((-1.0)*x140))+(((-1.0)*x164))+x179+x112);
op[42]=0;
op[43]=x153;
op[44]=0;
op[45]=x138;
op[46]=0;
op[47]=x139;
op[48]=x158;
op[49]=x158;
op[50]=x144;
op[51]=x144;
op[52]=x159;
op[53]=x159;
op[54]=((((-1.0)*x176))+(((-1.0)*x187))+x165+x151+(((-1.0)*x83)));
op[55]=((((-1.0)*x162))+(((-1.0)*x163))+(((-1.0)*x178))+x149+x90+x96);
op[56]=((((-1.0)*x185))+(((-1.0)*x109))+(((-1.0)*x105))+(((-1.0)*x104))+x168+x134);
op[57]=((((-1.0)*x166))+(((-1.0)*x181))+(((-1.0)*x103))+x177+x101);
op[58]=((((-1.0)*x165))+x171+x176+x146+(((-1.0)*x137))+(((-1.0)*x82)));
op[59]=((((-1.0)*x189))+x178+x162+x150+(((-1.0)*x90)));
op[60]=((9.68409412247928e-5)+(((-1.0)*x178))+(((-1.0)*x173))+x167+x95+x96+(((-1.0)*x94)));
op[61]=((((-1.0)*x160))+(((-1.0)*x175))+x176+x188);
op[62]=((((-1.0)*x181))+x169+x186+(((-1.0)*x98))+(((-1.0)*x99)));
op[63]=((((-1.0)*x170))+(((-1.0)*x109))+x105+x106+x185+(((-1.0)*x134)));
op[64]=((((-1.0)*x167))+(((-1.0)*x163))+x178+x148+(((-1.0)*x136))+x94);
op[65]=((((-1.0)*x176))+(((-1.0)*x172))+x160+x146+x82+x97);
op[66]=0;
op[67]=x158;
op[68]=0;
op[69]=x144;
op[70]=0;
op[71]=x159;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j5array[16], cj5array[16], sj5array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj5 = zeror[ij0+1], htj1 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj5)||isnan(htj1)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x190=htj0*htj0;
CheckValue<IkReal> x191=IKPowWithIntegerCheck(((1.0)+x190),-1);
if(!x191.valid){
continue;
}
cj0array[numsolutions]=((x191.value)*(((1.0)+(((-1.0)*x190)))));
CheckValue<IkReal> x192=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x192.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x192.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x193=htj5*htj5;
CheckValue<IkReal> x194=IKPowWithIntegerCheck(((1.0)+x193),-1);
if(!x194.valid){
continue;
}
cj5array[numsolutions]=((x194.value)*(((1.0)+(((-1.0)*x193)))));
CheckValue<IkReal> x195=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x195.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x195.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x196=htj1*htj1;
CheckValue<IkReal> x197=IKPowWithIntegerCheck(((1.0)+x196),-1);
if(!x197.valid){
continue;
}
cj1array[numsolutions]=((x197.value)*(((1.0)+(((-1.0)*x196)))));
CheckValue<IkReal> x198=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x198.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x198.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj5 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij0]-cj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij0]-sj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij5[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j5 = j5array[ij0]; cj5 = cj5array[ij0]; sj5 = sj5array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x199=((1.0)*sj0);
cj3array[0]=(((cj0*cj5*r11))+(((-1.0)*r00*sj5*x199))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x199)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x200=((0.0445)*cj0);
IkReal x201=((0.0445)*sj0);
evalcond[0]=((0.02)+((cj5*r01*x201))+(((-1.0)*r10*sj5*x200))+(((-0.02)*(IKcos(j3))))+((px*sj0))+((r00*sj5*x201))+(((-1.0)*cj5*r11*x200))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x202=cj3*cj3;
j2eval[0]=((1.66666666666667)+(((-1.0)*sj3))+(((-1.66666666666667)*x202)));
j2eval[1]=IKsign(((0.02)+(((-0.02)*x202))+(((-0.012)*sj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x203=cj0*cj0;
IkReal x204=cj5*cj5;
IkReal x205=r01*r01;
IkReal x206=r11*r11;
IkReal x207=r00*r00;
IkReal x208=r02*r02;
IkReal x209=(cj5*sj5);
IkReal x210=(cj5*sj3);
IkReal x211=((2.0)*r11);
IkReal x212=(r00*sj0);
IkReal x213=(cj0*sj3);
IkReal x214=(r02*sj0);
IkReal x215=((1.0)*x204);
IkReal x216=(cj0*r01*sj0);
IkReal x217=((2.0)*r00*r01);
IkReal x218=((2.0)*cj0*r10*sj0);
IkReal x219=(x203*x206);
IkReal x220=(x203*x205);
IkReal x221=(((cj0*x209*x211*x212))+((x204*x211*x216))+(((-2.0)*cj0*r12*x214))+((x203*x204*(r10*r10)))+((x203*x209*x217))+(((-2.0)*cj0*r10*x204*x212))+(((-1.0)*x205*x215))+(((-1.0)*x203*x207*x215))+((x204*x220))+x219+x205+x208+((x204*x207))+(((-1.0)*r10*x203*x209*x211))+(((2.0)*r10*x209*x216))+((x203*(r12*r12)))+(((-1.0)*x211*x216))+(((-1.0)*x203*x208))+(((-1.0)*x209*x217))+(((-1.0)*x215*x219))+(((-1.0)*x220)));
j4eval[0]=x221;
j4eval[1]=IKsign(x221);
j4eval[2]=((IKabs(((((-1.0)*sj3*x214))+((r12*x213)))))+(IKabs((((cj0*r10*x210))+(((-1.0)*r11*sj5*x213))+((r01*sj0*sj3*sj5))+(((-1.0)*x210*x212))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x222=(cj1*sj0);
IkReal x223=((5.60817055157542)*py);
IkReal x224=(sj0*sj1);
IkReal x225=((0.249563589545106)*sj5);
IkReal x226=((5.60817055157542)*cj1);
IkReal x227=((0.37914392461355)*py);
IkReal x228=(cj0*sj1);
IkReal x229=(pz*sj1);
IkReal x230=(cj0*cj1);
IkReal x231=((0.016871904645303)*cj5*r11);
IkReal x232=((0.37914392461355)*cj0*px);
IkReal x233=((0.249563589545106)*cj5*r11);
IkReal x234=((0.016871904645303)*r00*sj5);
IkReal x235=((0.016871904645303)*cj5*r01);
IkReal x236=((0.249563589545106)*cj5*r01);
IkReal x237=((0.016871904645303)*r10*sj5);
if( IKabs(((-0.0625587475612357)+((x224*x227))+(((0.37914392461355)*px*x228))+((x222*x223))+(((-5.60817055157542)*x229))+((x228*x235))+((x228*x234))+(((0.37914392461355)*cj1*pz))+((x230*x236))+((x222*x233))+((r00*x225*x230))+((r10*x222*x225))+((cj0*px*x226))+((x224*x237))+((x224*x231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.925348141009945)+(((5.60817055157542)*px*x228))+(((-1.0)*x230*x235))+(((-1.0)*x230*x234))+(((-0.37914392461355)*px*x230))+((x228*x236))+((pz*x226))+(((0.37914392461355)*x229))+(((-1.0)*x222*x227))+((x223*x224))+((x224*x233))+((r00*x225*x228))+((r10*x224*x225))+(((-1.0)*x222*x237))+(((-1.0)*x222*x231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.0625587475612357)+((x224*x227))+(((0.37914392461355)*px*x228))+((x222*x223))+(((-5.60817055157542)*x229))+((x228*x235))+((x228*x234))+(((0.37914392461355)*cj1*pz))+((x230*x236))+((x222*x233))+((r00*x225*x230))+((r10*x222*x225))+((cj0*px*x226))+((x224*x237))+((x224*x231))))+IKsqr(((-0.925348141009945)+(((5.60817055157542)*px*x228))+(((-1.0)*x230*x235))+(((-1.0)*x230*x234))+(((-0.37914392461355)*px*x230))+((x228*x236))+((pz*x226))+(((0.37914392461355)*x229))+(((-1.0)*x222*x227))+((x223*x224))+((x224*x233))+((r00*x225*x228))+((r10*x224*x225))+(((-1.0)*x222*x237))+(((-1.0)*x222*x231))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.0625587475612357)+((x224*x227))+(((0.37914392461355)*px*x228))+((x222*x223))+(((-5.60817055157542)*x229))+((x228*x235))+((x228*x234))+(((0.37914392461355)*cj1*pz))+((x230*x236))+((x222*x233))+((r00*x225*x230))+((r10*x222*x225))+((cj0*px*x226))+((x224*x237))+((x224*x231))), ((-0.925348141009945)+(((5.60817055157542)*px*x228))+(((-1.0)*x230*x235))+(((-1.0)*x230*x234))+(((-0.37914392461355)*px*x230))+((x228*x236))+((pz*x226))+(((0.37914392461355)*x229))+(((-1.0)*x222*x227))+((x223*x224))+((x224*x233))+((r00*x225*x228))+((r10*x224*x225))+(((-1.0)*x222*x237))+(((-1.0)*x222*x231))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x238=IKsin(j2);
IkReal x239=IKcos(j2);
IkReal x240=((0.0445)*cj0);
IkReal x241=((0.0445)*sj0);
IkReal x242=(sj1*x239);
IkReal x243=(sj1*x238);
IkReal x244=(cj1*x239);
IkReal x245=(cj1*x238);
evalcond[0]=((((-0.012)*x245))+(((-0.012)*x242))+(((-0.165)*cj1))+(((-0.1775)*x244))+pz+(((0.1775)*x243)));
evalcond[1]=((((-0.012)*x244))+(((-1.0)*r00*sj5*x240))+(((0.165)*sj1))+(((-1.0)*cj5*r11*x241))+(((-1.0)*cj5*r01*x240))+(((-1.0)*py*sj0))+(((0.1775)*x245))+(((0.1775)*x242))+(((0.012)*x243))+(((-1.0)*r10*sj5*x241))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x246=r21*r21;
IkReal x247=cj5*cj5;
IkReal x248=((((2.0)*cj5*r20*r21*sj5))+(((-1.0)*x246))+(((-1.0)*x247*(r20*r20)))+(((-1.0)*(r22*r22)))+((x246*x247)));
j4eval[0]=x248;
j4eval[1]=IKsign(x248);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x249=((1.0)*sj0);
IkReal x250=((1.0)*cj0);
IkReal x251=((((-1.0)*r00*sj5*x250))+(((-1.0)*cj5*r11*x249))+(((-1.0)*cj5*r01*x250))+(((-1.0)*r10*sj5*x249)));
j4eval[0]=x251;
j4eval[1]=IKsign(x251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x252=cj5*cj5;
IkReal x253=(cj0*r11);
IkReal x254=((1.0)*sj0);
IkReal x255=(cj0*r10);
IkReal x256=(cj5*r20*sj5);
IkReal x257=(r21*x252);
IkReal x258=(cj5*r21*sj5);
IkReal x259=(r20*x252);
IkReal x260=((((-1.0)*r21*x253))+((r00*sj0*x259))+(((-1.0)*r01*x254*x257))+(((-1.0)*r01*x254*x256))+(((-1.0)*r00*x254*x258))+((r01*r21*sj0))+((x253*x256))+((x253*x257))+(((-1.0)*x255*x259))+(((-1.0)*cj0*r12*r22))+((x255*x258))+((r02*r22*sj0)));
j4eval[0]=x260;
j4eval[1]=IKsign(x260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x261=cj5*cj5;
IkReal x262=((1.0)*sj0);
IkReal x263=(cj2*sj1);
IkReal x264=(cj0*r12);
IkReal x265=(r11*sj5);
IkReal x266=(cj5*r00);
IkReal x267=(cj5*r10);
IkReal x268=(cj5*r20);
IkReal x269=(r01*sj5);
IkReal x270=(cj0*r11);
IkReal x271=(r21*sj5);
IkReal x272=(cj1*sj2);
IkReal x273=((1.0)*cj0);
IkReal x274=(r21*x261);
IkReal x275=(cj0*x272);
IkReal x276=(r20*x261);
CheckValue<IkReal> x277 = IKatan2WithCheck(IkReal((((x263*x264))+((x264*x272))+(((-1.0)*r02*x262*x263))+(((-1.0)*r02*x262*x272)))),IkReal(((((-1.0)*x263*x265*x273))+((cj0*x263*x267))+((sj0*x269*x272))+(((-1.0)*x262*x266*x272))+(((-1.0)*x262*x263*x266))+(((-1.0)*x265*x272*x273))+((x267*x275))+((sj0*x263*x269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x277.valid){
continue;
}
CheckValue<IkReal> x278=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x264))+(((-1.0)*r10*x273*x276))+((cj0*x265*x268))+(((-1.0)*x262*x266*x271))+(((-1.0)*x262*x268*x269))+(((-1.0)*r01*x262*x274))+(((-1.0)*r21*x270))+((x270*x274))+((cj0*x267*x271))+((r01*r21*sj0))+((r00*sj0*x276))+((r02*r22*sj0)))),-1);
if(!x278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x277.value)+(((1.5707963267949)*(x278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x279=IKcos(j4);
IkReal x280=IKsin(j4);
IkReal x281=(cj1*cj2);
IkReal x282=((1.0)*r12);
IkReal x283=(cj5*r00);
IkReal x284=(r11*sj5);
IkReal x285=((1.0)*sj2);
IkReal x286=((1.0)*sj5);
IkReal x287=(cj5*r10);
IkReal x288=(cj2*sj1);
IkReal x289=(cj5*r20);
IkReal x290=(r01*sj5);
IkReal x291=(sj1*x285);
IkReal x292=((1.0)*x279);
IkReal x293=(sj0*x280);
IkReal x294=(sj0*x279);
IkReal x295=(cj0*x280);
IkReal x296=(cj0*x279);
evalcond[0]=(((x279*x289))+(((-1.0)*r21*x279*x286))+((cj1*sj2))+((r22*x280))+x288);
evalcond[1]=((((-1.0)*x291))+(((-1.0)*r21*x280*x286))+x281+((x280*x289))+(((-1.0)*r22*x292)));
evalcond[2]=(((r12*x296))+((x283*x293))+(((-1.0)*r02*sj0*x292))+((x284*x295))+(((-1.0)*r01*x286*x293))+(((-1.0)*x287*x295)));
evalcond[3]=(((x283*x294))+((x284*x296))+(((-1.0)*cj0*x287*x292))+(((-1.0)*r01*x286*x294))+((r02*x293))+(((-1.0)*x282*x295)));
evalcond[4]=(((r12*x294))+((x290*x295))+(((-1.0)*x283*x295))+((x284*x293))+(((-1.0)*cj1*x285))+(((-1.0)*x288))+(((-1.0)*x287*x293))+((r02*x296)));
evalcond[5]=(((x290*x296))+(((-1.0)*x291))+((x284*x294))+x281+(((-1.0)*r02*x295))+(((-1.0)*sj0*x287*x292))+(((-1.0)*cj0*x283*x292))+(((-1.0)*x282*x293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x297=((1.0)*sj0);
IkReal x298=(cj1*sj2);
IkReal x299=(r01*sj5);
IkReal x300=(cj2*sj1);
IkReal x301=(cj0*r12);
IkReal x302=((1.0)*cj0);
IkReal x303=(cj0*r11*sj5);
IkReal x304=(cj5*r00*sj0);
IkReal x305=(cj5*r10*x302);
CheckValue<IkReal> x306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x302))+(((-1.0)*r10*sj5*x297))+(((-1.0)*cj5*r01*x302))+(((-1.0)*cj5*r11*x297)))),-1);
if(!x306.valid){
continue;
}
CheckValue<IkReal> x307 = IKatan2WithCheck(IkReal(((((-1.0)*x298*x305))+(((-1.0)*x297*x298*x299))+((x298*x303))+((x298*x304))+(((-1.0)*x297*x299*x300))+((x300*x304))+((x300*x303))+(((-1.0)*x300*x305)))),IkReal((((x298*x301))+(((-1.0)*r02*x297*x298))+((x300*x301))+(((-1.0)*r02*x297*x300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x306.value)))+(x307.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x308=IKcos(j4);
IkReal x309=IKsin(j4);
IkReal x310=(cj1*cj2);
IkReal x311=((1.0)*r12);
IkReal x312=(cj5*r00);
IkReal x313=(r11*sj5);
IkReal x314=((1.0)*sj2);
IkReal x315=((1.0)*sj5);
IkReal x316=(cj5*r10);
IkReal x317=(cj2*sj1);
IkReal x318=(cj5*r20);
IkReal x319=(r01*sj5);
IkReal x320=(sj1*x314);
IkReal x321=((1.0)*x308);
IkReal x322=(sj0*x309);
IkReal x323=(sj0*x308);
IkReal x324=(cj0*x309);
IkReal x325=(cj0*x308);
evalcond[0]=((((-1.0)*r21*x308*x315))+((r22*x309))+((cj1*sj2))+((x308*x318))+x317);
evalcond[1]=((((-1.0)*r22*x321))+(((-1.0)*x320))+x310+((x309*x318))+(((-1.0)*r21*x309*x315)));
evalcond[2]=((((-1.0)*r02*sj0*x321))+((r12*x325))+((x313*x324))+((x312*x322))+(((-1.0)*x316*x324))+(((-1.0)*r01*x315*x322)));
evalcond[3]=(((r02*x322))+((x313*x325))+((x312*x323))+(((-1.0)*x311*x324))+(((-1.0)*r01*x315*x323))+(((-1.0)*cj0*x316*x321)));
evalcond[4]=(((r02*x325))+(((-1.0)*x312*x324))+((r12*x323))+((x313*x322))+(((-1.0)*cj1*x314))+(((-1.0)*x317))+(((-1.0)*x316*x322))+((x319*x324)));
evalcond[5]=((((-1.0)*cj0*x312*x321))+((x313*x323))+(((-1.0)*x320))+x310+(((-1.0)*x311*x322))+(((-1.0)*r02*x324))+(((-1.0)*sj0*x316*x321))+((x319*x325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x326=r21*r21;
IkReal x327=cj5*cj5;
IkReal x328=(cj1*sj2);
IkReal x329=(cj5*r20);
IkReal x330=(cj1*cj2);
IkReal x331=(sj1*sj2);
IkReal x332=(r21*sj5);
IkReal x333=(cj2*sj1);
IkReal x334=((1.0)*x332);
CheckValue<IkReal> x335=IKPowWithIntegerCheck(IKsign((((x326*x327))+(((-1.0)*x327*(r20*r20)))+(((2.0)*x329*x332))+(((-1.0)*x326))+(((-1.0)*(r22*r22))))),-1);
if(!x335.valid){
continue;
}
CheckValue<IkReal> x336 = IKatan2WithCheck(IkReal((((r22*x333))+(((-1.0)*x329*x331))+((x331*x332))+(((-1.0)*x330*x334))+((r22*x328))+((x329*x330)))),IkReal((((r22*x331))+((x328*x329))+(((-1.0)*x333*x334))+(((-1.0)*x328*x334))+((x329*x333))+(((-1.0)*r22*x330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x335.value)))+(x336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x337=IKcos(j4);
IkReal x338=IKsin(j4);
IkReal x339=(cj1*cj2);
IkReal x340=((1.0)*r12);
IkReal x341=(cj5*r00);
IkReal x342=(r11*sj5);
IkReal x343=((1.0)*sj2);
IkReal x344=((1.0)*sj5);
IkReal x345=(cj5*r10);
IkReal x346=(cj2*sj1);
IkReal x347=(cj5*r20);
IkReal x348=(r01*sj5);
IkReal x349=(sj1*x343);
IkReal x350=((1.0)*x337);
IkReal x351=(sj0*x338);
IkReal x352=(sj0*x337);
IkReal x353=(cj0*x338);
IkReal x354=(cj0*x337);
evalcond[0]=(((r22*x338))+(((-1.0)*r21*x337*x344))+((x337*x347))+((cj1*sj2))+x346);
evalcond[1]=((((-1.0)*r22*x350))+(((-1.0)*r21*x338*x344))+x339+((x338*x347))+(((-1.0)*x349)));
evalcond[2]=(((r12*x354))+((x341*x351))+(((-1.0)*x345*x353))+((x342*x353))+(((-1.0)*r01*x344*x351))+(((-1.0)*r02*sj0*x350)));
evalcond[3]=((((-1.0)*cj0*x345*x350))+((x341*x352))+((x342*x354))+(((-1.0)*r01*x344*x352))+(((-1.0)*x340*x353))+((r02*x351)));
evalcond[4]=(((r12*x352))+(((-1.0)*x341*x353))+(((-1.0)*cj1*x343))+(((-1.0)*x345*x351))+((x342*x351))+((x348*x353))+((r02*x354))+(((-1.0)*x346)));
evalcond[5]=(x339+((x342*x352))+(((-1.0)*sj0*x345*x350))+(((-1.0)*cj0*x341*x350))+(((-1.0)*x340*x351))+((x348*x354))+(((-1.0)*r02*x353))+(((-1.0)*x349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x355=(cj1*sj0);
IkReal x356=((5.60817055157542)*py);
IkReal x357=(sj0*sj1);
IkReal x358=((0.249563589545106)*sj5);
IkReal x359=((5.60817055157542)*cj1);
IkReal x360=((0.37914392461355)*py);
IkReal x361=(cj0*sj1);
IkReal x362=(pz*sj1);
IkReal x363=(cj0*cj1);
IkReal x364=((0.016871904645303)*cj5*r11);
IkReal x365=((0.37914392461355)*cj0*px);
IkReal x366=((0.249563589545106)*cj5*r11);
IkReal x367=((0.016871904645303)*r00*sj5);
IkReal x368=((0.016871904645303)*cj5*r01);
IkReal x369=((0.249563589545106)*cj5*r01);
IkReal x370=((0.016871904645303)*r10*sj5);
if( IKabs(((-0.0625587475612357)+((x361*x368))+((x361*x367))+(((0.37914392461355)*cj1*pz))+((x355*x356))+((x355*x366))+((r00*x358*x363))+(((-5.60817055157542)*x362))+((cj0*px*x359))+((x357*x364))+((x357*x360))+((x357*x370))+((x363*x369))+(((0.37914392461355)*px*x361))+((r10*x355*x358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.925348141009945)+((x361*x369))+((x356*x357))+(((-1.0)*x363*x368))+(((-1.0)*x363*x367))+(((0.37914392461355)*x362))+(((-1.0)*x355*x370))+(((-1.0)*x355*x360))+(((-1.0)*x355*x364))+((r10*x357*x358))+((r00*x358*x361))+(((-0.37914392461355)*px*x363))+((pz*x359))+(((5.60817055157542)*px*x361))+((x357*x366)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.0625587475612357)+((x361*x368))+((x361*x367))+(((0.37914392461355)*cj1*pz))+((x355*x356))+((x355*x366))+((r00*x358*x363))+(((-5.60817055157542)*x362))+((cj0*px*x359))+((x357*x364))+((x357*x360))+((x357*x370))+((x363*x369))+(((0.37914392461355)*px*x361))+((r10*x355*x358))))+IKsqr(((-0.925348141009945)+((x361*x369))+((x356*x357))+(((-1.0)*x363*x368))+(((-1.0)*x363*x367))+(((0.37914392461355)*x362))+(((-1.0)*x355*x370))+(((-1.0)*x355*x360))+(((-1.0)*x355*x364))+((r10*x357*x358))+((r00*x358*x361))+(((-0.37914392461355)*px*x363))+((pz*x359))+(((5.60817055157542)*px*x361))+((x357*x366))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.0625587475612357)+((x361*x368))+((x361*x367))+(((0.37914392461355)*cj1*pz))+((x355*x356))+((x355*x366))+((r00*x358*x363))+(((-5.60817055157542)*x362))+((cj0*px*x359))+((x357*x364))+((x357*x360))+((x357*x370))+((x363*x369))+(((0.37914392461355)*px*x361))+((r10*x355*x358))), ((-0.925348141009945)+((x361*x369))+((x356*x357))+(((-1.0)*x363*x368))+(((-1.0)*x363*x367))+(((0.37914392461355)*x362))+(((-1.0)*x355*x370))+(((-1.0)*x355*x360))+(((-1.0)*x355*x364))+((r10*x357*x358))+((r00*x358*x361))+(((-0.37914392461355)*px*x363))+((pz*x359))+(((5.60817055157542)*px*x361))+((x357*x366))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x371=IKsin(j2);
IkReal x372=IKcos(j2);
IkReal x373=((0.0445)*cj0);
IkReal x374=((0.0445)*sj0);
IkReal x375=(sj1*x372);
IkReal x376=(sj1*x371);
IkReal x377=(cj1*x372);
IkReal x378=(cj1*x371);
evalcond[0]=((((-0.165)*cj1))+(((0.1775)*x376))+pz+(((-0.1775)*x377))+(((-0.012)*x375))+(((-0.012)*x378)));
evalcond[1]=((((-1.0)*r00*sj5*x373))+(((-1.0)*r10*sj5*x374))+(((0.1775)*x378))+(((0.1775)*x375))+(((0.165)*sj1))+(((-1.0)*cj5*r01*x373))+(((0.012)*x376))+(((-1.0)*py*sj0))+(((-1.0)*cj5*r11*x374))+(((-0.012)*x377))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x379=r21*r21;
IkReal x380=cj5*cj5;
IkReal x381=((((2.0)*cj5*r20*r21*sj5))+(((-1.0)*x379))+((x379*x380))+(((-1.0)*(r22*r22)))+(((-1.0)*x380*(r20*r20))));
j4eval[0]=x381;
j4eval[1]=IKsign(x381);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x382=((1.0)*sj0);
IkReal x383=((1.0)*cj0);
IkReal x384=((((-1.0)*cj5*r11*x382))+(((-1.0)*cj5*r01*x383))+(((-1.0)*r10*sj5*x382))+(((-1.0)*r00*sj5*x383)));
j4eval[0]=x384;
j4eval[1]=IKsign(x384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x385=cj5*cj5;
IkReal x386=(r00*sj0);
IkReal x387=((1.0)*sj0);
IkReal x388=(r01*r21);
IkReal x389=(cj0*r10);
IkReal x390=(cj0*r11*r21);
IkReal x391=(cj5*r21*sj5);
IkReal x392=((1.0)*x385);
IkReal x393=(cj5*r20*sj5);
IkReal x394=(((r20*x385*x389))+(((-1.0)*x387*x388))+x390+((sj0*x385*x388))+(((-1.0)*cj0*r11*x393))+(((-1.0)*x389*x391))+((cj0*r12*r22))+(((-1.0)*x390*x392))+((r01*sj0*x393))+(((-1.0)*r20*x386*x392))+(((-1.0)*r02*r22*x387))+((x386*x391)));
j4eval[0]=x394;
j4eval[1]=IKsign(x394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x395=cj5*cj5;
IkReal x396=(sj1*sj2);
IkReal x397=(r01*sj0);
IkReal x398=(cj0*r10);
IkReal x399=((1.0)*r21);
IkReal x400=(cj5*sj5);
IkReal x401=((1.0)*r02);
IkReal x402=(cj5*r00);
IkReal x403=(cj0*r11);
IkReal x404=(cj0*r12);
IkReal x405=((1.0)*sj0);
IkReal x406=((1.0)*sj5);
IkReal x407=(cj1*cj2);
IkReal x408=(r20*x395);
IkReal x409=(sj0*x407);
CheckValue<IkReal> x410=IKPowWithIntegerCheck(IKsign((((r21*x395*x397))+((r22*x404))+((r20*x397*x400))+(((-1.0)*r20*x400*x403))+((r00*r21*sj0*x400))+(((-1.0)*x395*x399*x403))+(((-1.0)*r00*x405*x408))+(((-1.0)*x397*x399))+((r21*x403))+((x398*x408))+(((-1.0)*r22*sj0*x401))+(((-1.0)*x398*x399*x400)))),-1);
if(!x410.valid){
continue;
}
CheckValue<IkReal> x411 = IKatan2WithCheck(IkReal((((cj5*x396*x398))+(((-1.0)*cj5*x398*x407))+(((-1.0)*x397*x406*x407))+((sj5*x396*x397))+((sj5*x403*x407))+(((-1.0)*x396*x402*x405))+(((-1.0)*x396*x403*x406))+((x402*x409)))),IkReal((((x404*x407))+(((-1.0)*x396*x404))+(((-1.0)*x401*x409))+((r02*sj0*x396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x410.value)))+(x411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x412=IKsin(j4);
IkReal x413=IKcos(j4);
IkReal x414=((1.0)*r12);
IkReal x415=(r11*sj5);
IkReal x416=(sj1*sj2);
IkReal x417=(cj5*r00);
IkReal x418=((1.0)*sj5);
IkReal x419=((1.0)*cj1);
IkReal x420=(cj5*r10);
IkReal x421=(cj5*r20);
IkReal x422=(r01*sj5);
IkReal x423=(sj2*x419);
IkReal x424=((1.0)*cj2*sj1);
IkReal x425=((1.0)*x413);
IkReal x426=(sj0*x412);
IkReal x427=(cj0*x412);
IkReal x428=(sj0*x413);
IkReal x429=(cj0*x413);
IkReal x430=(x424+x423);
evalcond[0]=(((x412*x421))+((cj1*cj2))+(((-1.0)*r21*x412*x418))+(((-1.0)*x416))+(((-1.0)*r22*x425)));
evalcond[1]=((((-1.0)*x430))+(((-1.0)*r21*x413*x418))+((x413*x421))+((r22*x412)));
evalcond[2]=((((-1.0)*r02*sj0*x425))+((x415*x427))+(((-1.0)*r01*x418*x426))+(((-1.0)*x420*x427))+((r12*x429))+((x417*x426)));
evalcond[3]=(((x415*x429))+(((-1.0)*r01*x418*x428))+((r02*x426))+(((-1.0)*cj0*x420*x425))+(((-1.0)*x414*x427))+((x417*x428)));
evalcond[4]=((((-1.0)*x430))+((x415*x426))+((r02*x429))+(((-1.0)*x420*x426))+(((-1.0)*x417*x427))+((r12*x428))+((x422*x427)));
evalcond[5]=((((-1.0)*sj0*x420*x425))+(((-1.0)*cj2*x419))+(((-1.0)*r02*x427))+(((-1.0)*cj0*x417*x425))+((x415*x428))+x416+(((-1.0)*x414*x426))+((x422*x429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x431=(cj1*cj2);
IkReal x432=(cj5*sj0);
IkReal x433=((1.0)*r11);
IkReal x434=(sj1*sj2);
IkReal x435=(r02*sj0);
IkReal x436=(cj0*sj5);
IkReal x437=((1.0)*cj0);
IkReal x438=(sj0*sj5);
IkReal x439=((1.0)*r00);
IkReal x440=(cj0*cj5*r10);
CheckValue<IkReal> x441 = IKatan2WithCheck(IkReal(((((-1.0)*x431*x435))+((cj0*r12*x431))+((x434*x435))+(((-1.0)*r12*x434*x437)))),IkReal(((((-1.0)*r01*x434*x438))+((x431*x440))+((r00*x432*x434))+(((-1.0)*cj5*r10*x434*x437))+((r11*x434*x436))+(((-1.0)*x431*x433*x436))+((r01*x431*x438))+(((-1.0)*x431*x432*x439)))),IKFAST_ATAN2_MAGTHRESH);
if(!x441.valid){
continue;
}
CheckValue<IkReal> x442=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01*x437))+(((-1.0)*x432*x433))+(((-1.0)*x436*x439))+(((-1.0)*r10*x438)))),-1);
if(!x442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x441.value)+(((1.5707963267949)*(x442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x443=IKsin(j4);
IkReal x444=IKcos(j4);
IkReal x445=((1.0)*r12);
IkReal x446=(r11*sj5);
IkReal x447=(sj1*sj2);
IkReal x448=(cj5*r00);
IkReal x449=((1.0)*sj5);
IkReal x450=((1.0)*cj1);
IkReal x451=(cj5*r10);
IkReal x452=(cj5*r20);
IkReal x453=(r01*sj5);
IkReal x454=(sj2*x450);
IkReal x455=((1.0)*cj2*sj1);
IkReal x456=((1.0)*x444);
IkReal x457=(sj0*x443);
IkReal x458=(cj0*x443);
IkReal x459=(sj0*x444);
IkReal x460=(cj0*x444);
IkReal x461=(x454+x455);
evalcond[0]=((((-1.0)*x447))+((x443*x452))+(((-1.0)*r22*x456))+((cj1*cj2))+(((-1.0)*r21*x443*x449)));
evalcond[1]=((((-1.0)*x461))+((r22*x443))+((x444*x452))+(((-1.0)*r21*x444*x449)));
evalcond[2]=((((-1.0)*r01*x449*x457))+((r12*x460))+((x446*x458))+(((-1.0)*r02*sj0*x456))+((x448*x457))+(((-1.0)*x451*x458)));
evalcond[3]=(((x446*x460))+(((-1.0)*cj0*x451*x456))+(((-1.0)*r01*x449*x459))+((r02*x457))+((x448*x459))+(((-1.0)*x445*x458)));
evalcond[4]=(((x453*x458))+(((-1.0)*x461))+((x446*x457))+((r02*x460))+((r12*x459))+(((-1.0)*x448*x458))+(((-1.0)*x451*x457)));
evalcond[5]=((((-1.0)*cj0*x448*x456))+((x453*x460))+(((-1.0)*r02*x458))+(((-1.0)*sj0*x451*x456))+((x446*x459))+x447+(((-1.0)*x445*x457))+(((-1.0)*cj2*x450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x462=r21*r21;
IkReal x463=cj5*cj5;
IkReal x464=(cj2*sj1);
IkReal x465=(cj1*sj2);
IkReal x466=((1.0)*r22);
IkReal x467=(sj1*sj2);
IkReal x468=(r21*sj5);
IkReal x469=(cj1*cj2);
IkReal x470=(cj5*r20);
IkReal x471=((1.0)*x470);
CheckValue<IkReal> x472=IKPowWithIntegerCheck(IKsign(((((2.0)*x468*x470))+(((-1.0)*x462))+(((-1.0)*r22*x466))+((x462*x463))+(((-1.0)*x463*(r20*r20))))),-1);
if(!x472.valid){
continue;
}
CheckValue<IkReal> x473 = IKatan2WithCheck(IkReal(((((-1.0)*x465*x466))+(((-1.0)*x467*x471))+((x469*x470))+(((-1.0)*x468*x469))+(((-1.0)*x464*x466))+((x467*x468)))),IkReal((((r22*x467))+(((-1.0)*x466*x469))+((x465*x468))+(((-1.0)*x464*x471))+((x464*x468))+(((-1.0)*x465*x471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x472.value)))+(x473.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x474=IKsin(j4);
IkReal x475=IKcos(j4);
IkReal x476=((1.0)*r12);
IkReal x477=(r11*sj5);
IkReal x478=(sj1*sj2);
IkReal x479=(cj5*r00);
IkReal x480=((1.0)*sj5);
IkReal x481=((1.0)*cj1);
IkReal x482=(cj5*r10);
IkReal x483=(cj5*r20);
IkReal x484=(r01*sj5);
IkReal x485=(sj2*x481);
IkReal x486=((1.0)*cj2*sj1);
IkReal x487=((1.0)*x475);
IkReal x488=(sj0*x474);
IkReal x489=(cj0*x474);
IkReal x490=(sj0*x475);
IkReal x491=(cj0*x475);
IkReal x492=(x485+x486);
evalcond[0]=((((-1.0)*x478))+(((-1.0)*r21*x474*x480))+((x474*x483))+(((-1.0)*r22*x487))+((cj1*cj2)));
evalcond[1]=((((-1.0)*x492))+((x475*x483))+(((-1.0)*r21*x475*x480))+((r22*x474)));
evalcond[2]=((((-1.0)*r01*x480*x488))+((r12*x491))+(((-1.0)*x482*x489))+((x479*x488))+((x477*x489))+(((-1.0)*r02*sj0*x487)));
evalcond[3]=((((-1.0)*x476*x489))+((r02*x488))+(((-1.0)*cj0*x482*x487))+((x479*x490))+(((-1.0)*r01*x480*x490))+((x477*x491)));
evalcond[4]=(((x484*x489))+(((-1.0)*x492))+((r02*x491))+((r12*x490))+(((-1.0)*x482*x488))+(((-1.0)*x479*x489))+((x477*x488)));
evalcond[5]=((((-1.0)*x476*x488))+(((-1.0)*cj2*x481))+x478+(((-1.0)*sj0*x482*x487))+(((-1.0)*cj0*x479*x487))+((x477*x490))+((x484*x491))+(((-1.0)*r02*x489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x493=cj0*cj0;
IkReal x494=cj5*cj5;
IkReal x495=r01*r01;
IkReal x496=r11*r11;
IkReal x497=r00*r00;
IkReal x498=r02*r02;
IkReal x499=(cj5*sj5);
IkReal x500=(cj5*sj3);
IkReal x501=((2.0)*r11);
IkReal x502=(r00*sj0);
IkReal x503=(cj0*sj3);
IkReal x504=(r02*sj0);
IkReal x505=((1.0)*x494);
IkReal x506=(cj0*r01*sj0);
IkReal x507=((2.0)*r00*r01);
IkReal x508=((2.0)*cj0*r10*sj0);
IkReal x509=(x493*x496);
IkReal x510=(x493*x495);
CheckValue<IkReal> x511=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj0*r10*x494*x502))+(((-1.0)*x505*x509))+(((-1.0)*x499*x507))+(((-1.0)*x493*x498))+(((-1.0)*x510))+(((-1.0)*x501*x506))+((x494*x497))+(((-1.0)*x495*x505))+((x493*(r12*r12)))+(((-1.0)*x493*x497*x505))+x498+x495+x509+((cj0*x499*x501*x502))+((x494*x510))+((x494*x501*x506))+((x493*x494*(r10*r10)))+((x493*x499*x507))+(((2.0)*r10*x499*x506))+(((-1.0)*r10*x493*x499*x501))+(((-2.0)*cj0*r12*x504)))),-1);
if(!x511.valid){
continue;
}
CheckValue<IkReal> x512 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x504))+((r12*x503)))),IkReal((((cj0*r10*x500))+(((-1.0)*x500*x502))+((r01*sj0*sj3*sj5))+(((-1.0)*r11*sj5*x503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x511.value)))+(x512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x513=IKsin(j4);
IkReal x514=IKcos(j4);
IkReal x515=(r11*sj5);
IkReal x516=(r02*sj0);
IkReal x517=((1.0)*x514);
IkReal x518=(cj0*cj5*r10);
IkReal x519=(cj0*x513);
IkReal x520=(r01*sj0*sj5);
IkReal x521=(cj0*x514);
IkReal x522=(cj5*r00*sj0);
IkReal x523=((1.0)*x513);
evalcond[0]=((((-1.0)*x520*x523))+((r12*x521))+((x513*x522))+(((-1.0)*x516*x517))+(((-1.0)*x518*x523))+((x515*x519)));
evalcond[1]=(sj3+(((-1.0)*r12*x519))+((x515*x521))+((x513*x516))+(((-1.0)*x517*x518))+(((-1.0)*x517*x520))+((x514*x522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
IkReal x524=(cj5*r20);
IkReal x525=(r20*sj5);
IkReal x526=(r21*sj5);
IkReal x527=(cj5*r21);
IkReal x528=(cj1*sj3*sj4);
IkReal x529=(cj4*r22*sj3);
IkReal x530=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*sj1*x529))+((cj1*x527))+((cj1*x525))+((x524*x530))+(((-1.0)*x526*x530)))))+(IKabs((((sj1*x525))+((sj1*x527))+((x526*x528))+((cj1*x529))+(((-1.0)*x524*x528))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x531=(cj4*r22);
IkReal x532=((1.0)*sj1);
IkReal x533=(r20*sj1);
IkReal x534=(cj5*sj4);
IkReal x535=(cj1*r20);
IkReal x536=(cj5*r21);
IkReal x537=(r21*sj4*sj5);
if( IKabs(((((-1.0)*x532*x537))+(((-1.0)*x531*x532))+((sj5*x535))+((cj1*x536))+((x533*x534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x536))+((sj5*x533))+((cj1*x531))+((cj1*x537))+(((-1.0)*x534*x535)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x532*x537))+(((-1.0)*x531*x532))+((sj5*x535))+((cj1*x536))+((x533*x534))))+IKsqr((((sj1*x536))+((sj5*x533))+((cj1*x531))+((cj1*x537))+(((-1.0)*x534*x535))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x532*x537))+(((-1.0)*x531*x532))+((sj5*x535))+((cj1*x536))+((x533*x534))), (((sj1*x536))+((sj5*x533))+((cj1*x531))+((cj1*x537))+(((-1.0)*x534*x535))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x538=IKcos(j2);
IkReal x539=IKsin(j2);
IkReal x540=((0.1775)*sj1);
IkReal x541=(cj0*r00);
IkReal x542=((0.0445)*sj5);
IkReal x543=(cj5*sj4);
IkReal x544=(cj0*r01);
IkReal x545=((1.0)*sj5);
IkReal x546=(sj4*sj5);
IkReal x547=(cj5*r21);
IkReal x548=(cj1*x538);
IkReal x549=((1.0)*r10*sj0);
IkReal x550=(sj1*x538);
IkReal x551=(cj5*r11*sj0);
IkReal x552=(sj1*x539);
IkReal x553=(cj1*x539);
IkReal x554=((1.0)*x550);
IkReal x555=((1.0)*x553);
IkReal x556=(x555+x554);
evalcond[0]=((((-1.0)*x556))+x547+((r20*sj5)));
evalcond[1]=((((-1.0)*x552))+((r20*x543))+x548+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x545)));
evalcond[2]=((((-1.0)*x541*x545))+(((-1.0)*x551))+(((-1.0)*x548))+x552+(((-1.0)*r10*sj0*x545))+(((-1.0)*cj5*x544)));
evalcond[3]=(((x539*x540))+(((-0.1775)*x548))+((r20*x542))+(((0.008)*x550))+(((0.008)*x553))+(((-0.165)*cj1))+(((0.0445)*x547))+pz);
evalcond[4]=((((-1.0)*x541*x543))+((x544*x546))+((cj0*cj4*r02))+(((-1.0)*x556))+((r11*sj0*x546))+(((-1.0)*x543*x549))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*x541*x542))+(((-0.0445)*x551))+(((0.165)*sj1))+(((0.008)*x548))+(((-0.008)*x552))+(((-0.0445)*cj5*x544))+(((-1.0)*py*sj0))+((x538*x540))+(((0.1775)*x553))+(((-1.0)*r10*sj0*x542))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x557=((1.0)*sj1);
IkReal x558=(r20*sj5);
IkReal x559=(cj5*r21);
IkReal x560=((1.0)*cj1);
IkReal x561=(cj4*r22);
IkReal x562=(r21*sj4*sj5);
IkReal x563=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x558*x560))+(((-1.0)*x557*x562))+(((-1.0)*x557*x561))+(((-1.0)*x559*x560))+((sj1*x563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x562))+((cj1*x561))+(((-1.0)*x560*x563))+(((-1.0)*x557*x558))+(((-1.0)*x557*x559)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x558*x560))+(((-1.0)*x557*x562))+(((-1.0)*x557*x561))+(((-1.0)*x559*x560))+((sj1*x563))))+IKsqr((((cj1*x562))+((cj1*x561))+(((-1.0)*x560*x563))+(((-1.0)*x557*x558))+(((-1.0)*x557*x559))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x558*x560))+(((-1.0)*x557*x562))+(((-1.0)*x557*x561))+(((-1.0)*x559*x560))+((sj1*x563))), (((cj1*x562))+((cj1*x561))+(((-1.0)*x560*x563))+(((-1.0)*x557*x558))+(((-1.0)*x557*x559))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x564=IKcos(j2);
IkReal x565=IKsin(j2);
IkReal x566=((0.1775)*sj1);
IkReal x567=(cj0*r00);
IkReal x568=((0.0445)*sj5);
IkReal x569=(cj5*sj4);
IkReal x570=(cj0*r01);
IkReal x571=((1.0)*sj5);
IkReal x572=(sj4*sj5);
IkReal x573=(cj5*r21);
IkReal x574=(cj1*x564);
IkReal x575=((1.0)*r10*sj0);
IkReal x576=(cj1*x565);
IkReal x577=(sj1*x564);
IkReal x578=(cj5*r11*sj0);
IkReal x579=(sj1*x565);
IkReal x580=((1.0)*x579);
evalcond[0]=(x577+x576+x573+((r20*sj5)));
evalcond[1]=((((-1.0)*r21*sj4*x571))+x574+((r20*x569))+(((-1.0)*cj4*r22))+(((-1.0)*x580)));
evalcond[2]=((((-1.0)*x578))+x574+(((-1.0)*x567*x571))+(((-1.0)*cj5*x570))+(((-1.0)*x580))+(((-1.0)*r10*sj0*x571)));
evalcond[3]=(((x565*x566))+(((-0.165)*cj1))+(((0.0445)*x573))+(((-0.1775)*x574))+(((-0.032)*x577))+(((-0.032)*x576))+pz+((r20*x568)));
evalcond[4]=((((-1.0)*x567*x569))+(((-1.0)*x569*x575))+((r11*sj0*x572))+((cj0*cj4*r02))+(((-1.0)*x576))+(((-1.0)*x577))+((x570*x572))+((cj4*r12*sj0)));
evalcond[5]=((((-0.0445)*cj5*x570))+(((0.1775)*x576))+(((-1.0)*r10*sj0*x568))+(((-0.0445)*x578))+((x564*x566))+(((0.165)*sj1))+(((-0.032)*x574))+(((-1.0)*py*sj0))+(((-1.0)*x567*x568))+(((0.032)*x579))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x581=(cj1*r22);
IkReal x582=(sj1*sj4);
IkReal x583=(cj5*r20);
IkReal x584=((1.0)*sj4);
IkReal x585=(r21*sj5);
IkReal x586=(cj4*sj1);
IkReal x587=(cj1*x585);
IkReal x588=((1.0)*r22*sj1);
if( IKabs((((x582*x583))+(((-1.0)*r22*x586))+((cj4*x587))+(((-1.0)*cj1*cj4*x583))+(((-1.0)*x582*x585))+(((-1.0)*x581*x584)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x582))+(((-1.0)*cj1*x583*x584))+((x585*x586))+((cj4*x581))+(((-1.0)*x583*x586))+((sj4*x587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x582*x583))+(((-1.0)*r22*x586))+((cj4*x587))+(((-1.0)*cj1*cj4*x583))+(((-1.0)*x582*x585))+(((-1.0)*x581*x584))))+IKsqr(((((-1.0)*r22*x582))+(((-1.0)*cj1*x583*x584))+((x585*x586))+((cj4*x581))+(((-1.0)*x583*x586))+((sj4*x587))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x582*x583))+(((-1.0)*r22*x586))+((cj4*x587))+(((-1.0)*cj1*cj4*x583))+(((-1.0)*x582*x585))+(((-1.0)*x581*x584))), ((((-1.0)*r22*x582))+(((-1.0)*cj1*x583*x584))+((x585*x586))+((cj4*x581))+(((-1.0)*x583*x586))+((sj4*x587))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x589=IKcos(j2);
IkReal x590=IKsin(j2);
IkReal x591=(sj0*sj4);
IkReal x592=((1.0)*cj5);
IkReal x593=(cj0*r00);
IkReal x594=((0.0445)*sj5);
IkReal x595=(r11*sj5);
IkReal x596=((0.0445)*cj5);
IkReal x597=((1.0)*cj4);
IkReal x598=(cj0*r01);
IkReal x599=(r10*sj0);
IkReal x600=(sj4*sj5);
IkReal x601=((1.0)*cj0);
IkReal x602=(cj4*sj0);
IkReal x603=(cj5*r20);
IkReal x604=(cj1*x589);
IkReal x605=(sj1*x589);
IkReal x606=(sj1*x590);
IkReal x607=(cj1*x590);
IkReal x608=((1.0)*x606);
evalcond[0]=(((r22*sj4))+(((-1.0)*r21*sj5*x597))+x607+x605+((cj4*x603)));
evalcond[1]=((((-1.0)*r21*x600))+((sj4*x603))+(((-1.0)*r22*x597))+x604+(((-1.0)*x608)));
evalcond[2]=((((0.1775)*x606))+(((-0.1775)*x604))+(((-0.165)*cj1))+(((-0.012)*x605))+(((-0.012)*x607))+pz);
evalcond[3]=(((r12*x602))+((cj0*cj4*r02))+(((-1.0)*x605))+(((-1.0)*x607))+(((-1.0)*sj4*x592*x593))+(((-1.0)*r10*x591*x592))+((x591*x595))+((x598*x600)));
evalcond[4]=(((cj4*sj5*x598))+((x595*x602))+(((-1.0)*cj4*x592*x593))+(((-1.0)*cj4*x592*x599))+(((-1.0)*r02*sj4*x601))+x604+(((-1.0)*x608))+(((-1.0)*r12*x591)));
evalcond[5]=((((0.012)*x606))+(((0.1775)*x605))+(((0.1775)*x607))+(((-1.0)*r11*sj0*x596))+(((-1.0)*x596*x598))+(((0.165)*sj1))+(((-1.0)*x593*x594))+(((-0.012)*x604))+(((-1.0)*x594*x599))+(((-1.0)*py*sj0))+(((-1.0)*px*x601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x609=((1.0)*cj4);
IkReal x610=(r22*sj1);
IkReal x611=(cj1*r22);
IkReal x612=(sj1*sj4);
IkReal x613=(cj5*r20);
IkReal x614=(r21*sj5);
IkReal x615=(cj1*x614);
if( IKabs(((((-1.0)*x612*x614))+((sj4*x611))+(((-1.0)*x609*x610))+(((-1.0)*x609*x615))+((x612*x613))+((cj1*cj4*x613)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x615))+((sj4*x610))+(((-1.0)*sj1*x609*x614))+(((-1.0)*cj1*sj4*x613))+((cj4*x611))+((cj4*sj1*x613)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x612*x614))+((sj4*x611))+(((-1.0)*x609*x610))+(((-1.0)*x609*x615))+((x612*x613))+((cj1*cj4*x613))))+IKsqr((((sj4*x615))+((sj4*x610))+(((-1.0)*sj1*x609*x614))+(((-1.0)*cj1*sj4*x613))+((cj4*x611))+((cj4*sj1*x613))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x612*x614))+((sj4*x611))+(((-1.0)*x609*x610))+(((-1.0)*x609*x615))+((x612*x613))+((cj1*cj4*x613))), (((sj4*x615))+((sj4*x610))+(((-1.0)*sj1*x609*x614))+(((-1.0)*cj1*sj4*x613))+((cj4*x611))+((cj4*sj1*x613))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x616=IKcos(j2);
IkReal x617=IKsin(j2);
IkReal x618=(sj0*sj4);
IkReal x619=((1.0)*cj5);
IkReal x620=(cj0*r00);
IkReal x621=((0.0445)*sj5);
IkReal x622=(r11*sj5);
IkReal x623=((0.0445)*cj5);
IkReal x624=((1.0)*cj4);
IkReal x625=(cj0*r01);
IkReal x626=(r10*sj0);
IkReal x627=(sj4*sj5);
IkReal x628=((1.0)*cj0);
IkReal x629=(cj4*sj0);
IkReal x630=(cj5*r20);
IkReal x631=(cj1*x616);
IkReal x632=(sj1*x616);
IkReal x633=(sj1*x617);
IkReal x634=(cj1*x617);
IkReal x635=((1.0)*x632);
IkReal x636=((1.0)*x634);
IkReal x637=(x636+x635);
evalcond[0]=(((sj4*x630))+(((-1.0)*r21*x627))+x631+(((-1.0)*x633))+(((-1.0)*r22*x624)));
evalcond[1]=(((r22*sj4))+((cj4*x630))+(((-1.0)*x637))+(((-1.0)*r21*sj5*x624)));
evalcond[2]=((((-0.165)*cj1))+(((0.1775)*x633))+pz+(((-0.012)*x632))+(((-0.012)*x634))+(((-0.1775)*x631)));
evalcond[3]=((((-1.0)*sj4*x619*x620))+((x625*x627))+(((-1.0)*x637))+((x618*x622))+((cj0*cj4*r02))+((r12*x629))+(((-1.0)*r10*x618*x619)));
evalcond[4]=((((-1.0)*r02*sj4*x628))+((cj4*sj5*x625))+(((-1.0)*cj4*x619*x620))+(((-1.0)*cj4*x619*x626))+(((-1.0)*r12*x618))+x633+(((-1.0)*x631))+((x622*x629)));
evalcond[5]=((((-1.0)*x621*x626))+(((0.165)*sj1))+(((-1.0)*x623*x625))+(((-1.0)*x620*x621))+(((-1.0)*r11*sj0*x623))+(((0.1775)*x632))+(((0.1775)*x634))+(((0.012)*x633))+(((-1.0)*py*sj0))+(((-1.0)*px*x628))+(((-0.012)*x631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x638=(cj1*cj4);
IkReal x639=(r21*sj5);
IkReal x640=((1.0)*sj4);
IkReal x641=(cj5*r20);
IkReal x642=(cj1*cj3);
IkReal x643=(cj3*r22);
IkReal x644=(cj3*sj1);
IkReal x645=((1.0)*cj4*sj1);
CheckValue<IkReal> x646 = IKatan2WithCheck(IkReal((((sj4*x641*x644))+((x638*x639))+(((-1.0)*cj1*r22*x640))+(((-1.0)*x643*x645))+(((-1.0)*x638*x641))+(((-1.0)*x639*x640*x644)))),IkReal((((x638*x643))+(((-1.0)*x641*x645))+((sj4*x639*x642))+(((-1.0)*r22*sj1*x640))+(((-1.0)*x640*x641*x642))+((cj4*sj1*x639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x646.valid){
continue;
}
CheckValue<IkReal> x647=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x647.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x646.value)+(((1.5707963267949)*(x647.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x648=IKcos(j2);
IkReal x649=IKsin(j2);
IkReal x650=((0.02)*sj3);
IkReal x651=(cj4*cj5);
IkReal x652=(cj5*sj4);
IkReal x653=(r20*sj5);
IkReal x654=((0.0445)*sj0);
IkReal x655=(cj5*r11);
IkReal x656=((1.0)*sj3);
IkReal x657=((1.0)*cj4);
IkReal x658=((1.0)*sj0);
IkReal x659=(cj0*r01);
IkReal x660=(sj4*sj5);
IkReal x661=((1.0)*cj0);
IkReal x662=(cj4*sj5);
IkReal x663=(r11*sj0);
IkReal x664=(cj5*r21);
IkReal x665=(cj1*x648);
IkReal x666=(sj1*x648);
IkReal x667=(r10*x658);
IkReal x668=(sj1*x649);
IkReal x669=(r00*x661);
IkReal x670=(cj1*x649);
evalcond[0]=((((-1.0)*x656*x666))+x653+x664+(((-1.0)*x656*x670)));
evalcond[1]=((((-1.0)*r21*x660))+(((-1.0)*r22*x657))+(((-1.0)*x668))+x665+((r20*x652)));
evalcond[2]=(((cj3*x670))+((cj3*x666))+((r22*sj4))+(((-1.0)*r21*sj5*x657))+((r20*x651)));
evalcond[3]=((((-1.0)*cj5*x659))+(((-1.0)*x655*x658))+(((-1.0)*sj5*x667))+(((-1.0)*sj5*x669))+(((-1.0)*x656*x665))+((sj3*x668)));
evalcond[4]=(((cj0*cj4*r02))+(((-1.0)*x666))+((x660*x663))+(((-1.0)*x670))+((x659*x660))+(((-1.0)*x652*x667))+(((-1.0)*x652*x669))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*r12*sj4*x658))+(((-1.0)*r02*sj4*x661))+((cj3*x665))+((x662*x663))+((x659*x662))+(((-1.0)*cj3*x668))+(((-1.0)*x651*x667))+(((-1.0)*x651*x669)));
evalcond[6]=((((0.0445)*x664))+(((-0.1775)*x665))+(((0.0445)*x653))+(((-0.165)*cj1))+(((-0.012)*x666))+pz+((x650*x670))+(((-0.012)*x670))+((x650*x666))+(((0.1775)*x668)));
evalcond[7]=((((-0.0445)*cj0*r00*sj5))+(((0.012)*x668))+(((0.165)*sj1))+(((0.1775)*x670))+(((-0.012)*x665))+(((-0.0445)*cj5*x659))+(((-1.0)*x650*x668))+(((-1.0)*px*x661))+(((-1.0)*py*x658))+((x650*x665))+(((0.1775)*x666))+(((-1.0)*x654*x655))+(((-1.0)*r10*sj5*x654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x671=((1.0)*cj1);
IkReal x672=(sj0*sj1);
IkReal x673=(cj5*r11);
IkReal x674=(r10*sj5);
IkReal x675=(r20*sj5);
IkReal x676=(cj5*r21);
IkReal x677=(cj0*cj5*r01);
IkReal x678=(cj0*r00*sj5);
CheckValue<IkReal> x679=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x679.valid){
continue;
}
CheckValue<IkReal> x680 = IKatan2WithCheck(IkReal((((x672*x674))+((x672*x673))+((sj1*x677))+((sj1*x678))+((cj1*x676))+((cj1*x675)))),IkReal(((((-1.0)*sj0*x671*x674))+(((-1.0)*sj0*x671*x673))+(((-1.0)*x671*x677))+(((-1.0)*x671*x678))+((sj1*x675))+((sj1*x676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x680.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x679.value)))+(x680.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x681=IKcos(j2);
IkReal x682=IKsin(j2);
IkReal x683=((0.02)*sj3);
IkReal x684=(cj4*cj5);
IkReal x685=(cj5*sj4);
IkReal x686=(r20*sj5);
IkReal x687=((0.0445)*sj0);
IkReal x688=(cj5*r11);
IkReal x689=((1.0)*sj3);
IkReal x690=((1.0)*cj4);
IkReal x691=((1.0)*sj0);
IkReal x692=(cj0*r01);
IkReal x693=(sj4*sj5);
IkReal x694=((1.0)*cj0);
IkReal x695=(cj4*sj5);
IkReal x696=(r11*sj0);
IkReal x697=(cj5*r21);
IkReal x698=(cj1*x681);
IkReal x699=(sj1*x681);
IkReal x700=(r10*x691);
IkReal x701=(sj1*x682);
IkReal x702=(r00*x694);
IkReal x703=(cj1*x682);
evalcond[0]=((((-1.0)*x689*x703))+x686+x697+(((-1.0)*x689*x699)));
evalcond[1]=((((-1.0)*x701))+(((-1.0)*r21*x693))+x698+(((-1.0)*r22*x690))+((r20*x685)));
evalcond[2]=(((r22*sj4))+((cj3*x699))+((r20*x684))+((cj3*x703))+(((-1.0)*r21*sj5*x690)));
evalcond[3]=(((sj3*x701))+(((-1.0)*x688*x691))+(((-1.0)*sj5*x700))+(((-1.0)*sj5*x702))+(((-1.0)*cj5*x692))+(((-1.0)*x689*x698)));
evalcond[4]=((((-1.0)*x703))+((cj0*cj4*r02))+((x692*x693))+((x693*x696))+(((-1.0)*x685*x700))+(((-1.0)*x685*x702))+(((-1.0)*x699))+((cj4*r12*sj0)));
evalcond[5]=(((x695*x696))+((x692*x695))+(((-1.0)*r12*sj4*x691))+((cj3*x698))+(((-1.0)*x684*x702))+(((-1.0)*x684*x700))+(((-1.0)*cj3*x701))+(((-1.0)*r02*sj4*x694)));
evalcond[6]=(((x683*x703))+(((-0.012)*x699))+(((-0.1775)*x698))+(((-0.165)*cj1))+(((0.0445)*x686))+(((-0.012)*x703))+pz+(((0.1775)*x701))+(((0.0445)*x697))+((x683*x699)));
evalcond[7]=((((-0.0445)*cj5*x692))+(((-1.0)*x687*x688))+(((0.012)*x701))+(((-0.0445)*cj0*r00*sj5))+(((-0.012)*x698))+(((0.165)*sj1))+(((-1.0)*x683*x701))+(((-1.0)*r10*sj5*x687))+(((-1.0)*px*x694))+(((0.1775)*x699))+(((-1.0)*py*x691))+(((0.1775)*x703))+((x683*x698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x704=(cj5*r20);
IkReal x705=(r20*sj5);
IkReal x706=(r21*sj5);
IkReal x707=(cj5*r21);
IkReal x708=(cj1*sj3*sj4);
IkReal x709=(cj4*r22*sj3);
IkReal x710=(sj1*sj3*sj4);
CheckValue<IkReal> x711=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x711.valid){
continue;
}
CheckValue<IkReal> x712 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x709))+(((-1.0)*x706*x710))+((x704*x710))+((cj1*x705))+((cj1*x707)))),IkReal((((x706*x708))+(((-1.0)*x704*x708))+((sj1*x705))+((sj1*x707))+((cj1*x709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x712.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x711.value)))+(x712.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x713=IKcos(j2);
IkReal x714=IKsin(j2);
IkReal x715=((0.02)*sj3);
IkReal x716=(cj4*cj5);
IkReal x717=(cj5*sj4);
IkReal x718=(r20*sj5);
IkReal x719=((0.0445)*sj0);
IkReal x720=(cj5*r11);
IkReal x721=((1.0)*sj3);
IkReal x722=((1.0)*cj4);
IkReal x723=((1.0)*sj0);
IkReal x724=(cj0*r01);
IkReal x725=(sj4*sj5);
IkReal x726=((1.0)*cj0);
IkReal x727=(cj4*sj5);
IkReal x728=(r11*sj0);
IkReal x729=(cj5*r21);
IkReal x730=(cj1*x713);
IkReal x731=(sj1*x713);
IkReal x732=(r10*x723);
IkReal x733=(sj1*x714);
IkReal x734=(r00*x726);
IkReal x735=(cj1*x714);
evalcond[0]=((((-1.0)*x721*x735))+(((-1.0)*x721*x731))+x718+x729);
evalcond[1]=((((-1.0)*r21*x725))+(((-1.0)*x733))+((r20*x717))+x730+(((-1.0)*r22*x722)));
evalcond[2]=(((r22*sj4))+((r20*x716))+((cj3*x735))+((cj3*x731))+(((-1.0)*r21*sj5*x722)));
evalcond[3]=(((sj3*x733))+(((-1.0)*x721*x730))+(((-1.0)*x720*x723))+(((-1.0)*cj5*x724))+(((-1.0)*sj5*x732))+(((-1.0)*sj5*x734)));
evalcond[4]=(((cj0*cj4*r02))+(((-1.0)*x717*x732))+(((-1.0)*x717*x734))+(((-1.0)*x735))+(((-1.0)*x731))+((x725*x728))+((x724*x725))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*r12*sj4*x723))+((x727*x728))+(((-1.0)*cj3*x733))+(((-1.0)*r02*sj4*x726))+(((-1.0)*x716*x732))+(((-1.0)*x716*x734))+((cj3*x730))+((x724*x727)));
evalcond[6]=((((0.0445)*x729))+(((-0.165)*cj1))+(((-0.012)*x731))+(((-0.012)*x735))+(((0.1775)*x733))+pz+(((-0.1775)*x730))+((x715*x735))+((x715*x731))+(((0.0445)*x718)));
evalcond[7]=((((-0.0445)*cj0*r00*sj5))+(((0.012)*x733))+(((0.165)*sj1))+(((-1.0)*px*x726))+(((-0.012)*x730))+(((0.1775)*x735))+(((0.1775)*x731))+(((-0.0445)*cj5*x724))+(((-1.0)*x715*x733))+(((-1.0)*x719*x720))+(((-1.0)*py*x723))+((x715*x730))+(((-1.0)*r10*sj5*x719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x736=((0.0445)*cj0);
IkReal x737=((0.02)*r21);
IkReal x738=(cj1*cj5);
IkReal x739=((0.012)*r21);
IkReal x740=((0.0445)*sj0);
IkReal x741=(sj3*sj5);
IkReal x742=((0.165)*sj3);
IkReal x743=(cj1*r20);
IkReal x744=((0.012)*sj5);
IkReal x745=(cj5*sj1);
IkReal x746=((0.1775)*r21);
IkReal x747=((1.0)*sj1);
IkReal x748=(r20*sj1);
IkReal x749=((0.1775)*sj5);
IkReal x750=(sj3*x745);
IkReal x751=(py*sj0*sj3);
IkReal x752=(cj0*px*sj3);
CheckValue<IkReal> x753 = IKatan2WithCheck(IkReal((((x745*x746))+(((0.02)*x741*x743))+(((-1.0)*r10*sj1*x740*x741))+((sj3*x737*x738))+(((-1.0)*r01*x736*x750))+(((-1.0)*r11*x740*x750))+(((-1.0)*x747*x752))+(((-1.0)*x747*x751))+(((-1.0)*x742*(cj1*cj1)))+(((-1.0)*r00*sj1*x736*x741))+x742+(((-1.0)*x738*x739))+(((-1.0)*x743*x744))+((x748*x749)))),IkReal(((((-1.0)*cj1*sj1*x742))+((cj1*x751))+((cj1*x752))+((cj1*r00*x736*x741))+(((0.02)*x741*x748))+((r01*sj3*x736*x738))+((x737*x750))+((r11*sj3*x738*x740))+(((-1.0)*x744*x748))+(((-1.0)*x738*x746))+((cj1*r10*x740*x741))+(((-1.0)*x739*x745))+(((-1.0)*x743*x749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x753.valid){
continue;
}
CheckValue<IkReal> x754=IKPowWithIntegerCheck(IKsign(((0.02)+(((-0.02)*(cj3*cj3)))+(((-0.012)*sj3)))),-1);
if(!x754.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x753.value)+(((1.5707963267949)*(x754.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x755=IKsin(j2);
IkReal x756=IKcos(j2);
IkReal x757=((1.0)*sj0);
IkReal x758=(r10*sj5);
IkReal x759=((0.02)*sj3);
IkReal x760=(r20*sj5);
IkReal x761=((0.0445)*sj0);
IkReal x762=(cj5*r11);
IkReal x763=((1.0)*sj3);
IkReal x764=((1.0)*cj0);
IkReal x765=(cj5*r01);
IkReal x766=(cj5*r21);
IkReal x767=(sj1*x756);
IkReal x768=(sj1*x755);
IkReal x769=(cj0*r00*sj5);
IkReal x770=(cj1*x755);
IkReal x771=(cj1*x756);
evalcond[0]=((((-1.0)*x763*x767))+x766+x760+(((-1.0)*x763*x770)));
evalcond[1]=(((sj3*x768))+(((-1.0)*x764*x765))+(((-1.0)*x757*x762))+(((-1.0)*r00*sj5*x764))+(((-1.0)*x763*x771))+(((-1.0)*x757*x758)));
evalcond[2]=((((-0.1775)*x771))+(((-0.165)*cj1))+(((0.0445)*x760))+(((0.0445)*x766))+((x759*x767))+(((-0.012)*x767))+((x759*x770))+pz+(((-0.012)*x770))+(((0.1775)*x768)));
evalcond[3]=((((-1.0)*x758*x761))+(((0.165)*sj1))+(((-1.0)*px*x764))+((x759*x771))+(((0.012)*x768))+(((-0.0445)*cj0*x765))+(((-1.0)*py*x757))+(((-0.012)*x771))+(((0.1775)*x770))+(((-1.0)*x761*x762))+(((-1.0)*x759*x768))+(((-0.0445)*x769))+(((0.1775)*x767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x772=((1.0)*sj0);
IkReal x773=((1.0)*cj0);
IkReal x774=((((-1.0)*r00*sj5*x773))+(((-1.0)*cj5*r01*x773))+(((-1.0)*cj5*r11*x772))+(((-1.0)*r10*sj5*x772)));
j4eval[0]=x774;
j4eval[1]=IKsign(x774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x775=r21*r21;
IkReal x776=cj5*cj5;
IkReal x777=((((2.0)*cj5*r20*r21*sj5))+(((-1.0)*x776*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x775))+((x775*x776)));
j4eval[0]=x777;
j4eval[1]=IKsign(x777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x778=cj5*cj5;
IkReal x779=(cj0*r11);
IkReal x780=((1.0)*sj0);
IkReal x781=(cj0*r10);
IkReal x782=(cj5*r20*sj5);
IkReal x783=(r21*x778);
IkReal x784=(cj5*r21*sj5);
IkReal x785=(r20*x778);
IkReal x786=(((x781*x784))+(((-1.0)*r01*x780*x783))+(((-1.0)*r01*x780*x782))+(((-1.0)*r00*x780*x784))+(((-1.0)*r21*x779))+((x779*x783))+((x779*x782))+(((-1.0)*x781*x785))+((r01*r21*sj0))+(((-1.0)*cj0*r12*r22))+((r02*r22*sj0))+((r00*sj0*x785)));
j4eval[0]=x786;
j4eval[1]=IKsign(x786);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x787=cj5*cj5;
IkReal x788=((1.0)*sj5);
IkReal x789=(cj5*r10);
IkReal x790=(cj0*r11);
IkReal x791=((1.0)*cj0);
IkReal x792=(r02*sj0);
IkReal x793=((1.0)*r01*sj0);
IkReal x794=(r21*x787);
IkReal x795=(cj5*r20*sj5);
IkReal x796=(cj5*r00*sj0);
IkReal x797=(cj1*cj3*sj2);
IkReal x798=(cj2*cj3*sj1);
IkReal x799=(r01*sj0*sj5);
IkReal x800=(r20*x787);
IkReal x801=(cj0*x798);
CheckValue<IkReal> x802 = IKatan2WithCheck(IkReal((((r12*x801))+((cj0*r12*x797))+(((-1.0)*x792*x797))+(((-1.0)*x792*x798)))),IkReal(((((-1.0)*x796*x797))+(((-1.0)*x796*x798))+(((-1.0)*x788*x790*x798))+(((-1.0)*x788*x790*x797))+((x789*x801))+((x798*x799))+((x797*x799))+((cj0*x789*x797)))),IKFAST_ATAN2_MAGTHRESH);
if(!x802.valid){
continue;
}
CheckValue<IkReal> x803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x790))+((x790*x794))+((x790*x795))+(((-1.0)*r10*x791*x800))+(((-1.0)*x793*x794))+(((-1.0)*cj5*r01*r20*sj0*x788))+((r01*r21*sj0))+((r00*sj0*x800))+((r22*x792))+(((-1.0)*r12*r22*x791))+((cj0*r21*sj5*x789))+(((-1.0)*r21*x788*x796)))),-1);
if(!x803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x802.value)+(((1.5707963267949)*(x803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x804=IKsin(j4);
IkReal x805=IKcos(j4);
IkReal x806=((1.0)*r12);
IkReal x807=(r11*sj5);
IkReal x808=(cj5*r00);
IkReal x809=(cj2*cj3);
IkReal x810=((1.0)*sj2);
IkReal x811=((1.0)*sj5);
IkReal x812=(cj5*r10);
IkReal x813=(cj5*r20);
IkReal x814=(r01*sj5);
IkReal x815=((1.0)*x805);
IkReal x816=(sj0*x804);
IkReal x817=(cj0*x804);
IkReal x818=(sj0*x805);
IkReal x819=(cj0*x805);
evalcond[0]=((((-1.0)*r21*x804*x811))+((x804*x813))+(((-1.0)*r22*x815))+((cj1*cj2))+(((-1.0)*sj1*x810)));
evalcond[1]=((((-1.0)*r21*x805*x811))+((cj1*cj3*sj2))+((r22*x804))+((sj1*x809))+((x805*x813)));
evalcond[2]=((((-1.0)*r01*x811*x816))+(((-1.0)*x812*x817))+((x808*x816))+((x807*x817))+(((-1.0)*r02*sj0*x815))+((r12*x819)));
evalcond[3]=((((-1.0)*r01*x811*x818))+sj3+((x808*x818))+((x807*x819))+(((-1.0)*x806*x817))+((r02*x816))+(((-1.0)*cj0*x812*x815)));
evalcond[4]=((((-1.0)*x812*x816))+(((-1.0)*cj2*sj1))+(((-1.0)*x808*x817))+((x814*x817))+((x807*x816))+(((-1.0)*cj1*x810))+((r12*x818))+((r02*x819)));
evalcond[5]=((((-1.0)*r02*x817))+((cj1*x809))+((x814*x819))+((x807*x818))+(((-1.0)*cj3*sj1*x810))+(((-1.0)*sj0*x812*x815))+(((-1.0)*cj0*x808*x815))+(((-1.0)*x806*x816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x820=r21*r21;
IkReal x821=cj5*cj5;
IkReal x822=(sj1*sj2);
IkReal x823=(r21*sj5);
IkReal x824=(cj1*cj2);
IkReal x825=(cj5*r20);
IkReal x826=((1.0)*cj3);
IkReal x827=(cj1*sj2);
IkReal x828=(cj2*sj1);
IkReal x829=(cj3*r22);
CheckValue<IkReal> x830=IKPowWithIntegerCheck(IKsign((((x820*x821))+(((-1.0)*x820))+(((-1.0)*(r22*r22)))+(((-1.0)*x821*(r20*r20)))+(((2.0)*x823*x825)))),-1);
if(!x830.valid){
continue;
}
CheckValue<IkReal> x831 = IKatan2WithCheck(IkReal(((((-1.0)*x823*x824))+((x824*x825))+(((-1.0)*x822*x825))+((x822*x823))+((x828*x829))+((x827*x829)))),IkReal((((cj3*x825*x827))+((cj3*x825*x828))+(((-1.0)*x823*x826*x827))+(((-1.0)*x823*x826*x828))+(((-1.0)*r22*x824))+((r22*x822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x830.value)))+(x831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x832=IKsin(j4);
IkReal x833=IKcos(j4);
IkReal x834=((1.0)*r12);
IkReal x835=(r11*sj5);
IkReal x836=(cj5*r00);
IkReal x837=(cj2*cj3);
IkReal x838=((1.0)*sj2);
IkReal x839=((1.0)*sj5);
IkReal x840=(cj5*r10);
IkReal x841=(cj5*r20);
IkReal x842=(r01*sj5);
IkReal x843=((1.0)*x833);
IkReal x844=(sj0*x832);
IkReal x845=(cj0*x832);
IkReal x846=(sj0*x833);
IkReal x847=(cj0*x833);
evalcond[0]=((((-1.0)*sj1*x838))+((x832*x841))+(((-1.0)*r22*x843))+((cj1*cj2))+(((-1.0)*r21*x832*x839)));
evalcond[1]=(((r22*x832))+((cj1*cj3*sj2))+((x833*x841))+(((-1.0)*r21*x833*x839))+((sj1*x837)));
evalcond[2]=(((x835*x845))+(((-1.0)*x840*x845))+(((-1.0)*r01*x839*x844))+((x836*x844))+((r12*x847))+(((-1.0)*r02*sj0*x843)));
evalcond[3]=(sj3+((r02*x844))+((x835*x847))+(((-1.0)*r01*x839*x846))+((x836*x846))+(((-1.0)*x834*x845))+(((-1.0)*cj0*x840*x843)));
evalcond[4]=(((r02*x847))+(((-1.0)*cj2*sj1))+((x835*x844))+(((-1.0)*x840*x844))+((x842*x845))+((r12*x846))+(((-1.0)*x836*x845))+(((-1.0)*cj1*x838)));
evalcond[5]=((((-1.0)*sj0*x840*x843))+((x835*x846))+(((-1.0)*r02*x845))+(((-1.0)*cj3*sj1*x838))+(((-1.0)*cj0*x836*x843))+((x842*x847))+(((-1.0)*x834*x844))+((cj1*x837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x848=(cj1*cj2);
IkReal x849=(cj5*sj0);
IkReal x850=((1.0)*r11);
IkReal x851=(sj1*sj2);
IkReal x852=(r02*sj0);
IkReal x853=(cj0*sj5);
IkReal x854=((1.0)*cj0);
IkReal x855=(sj0*sj5);
IkReal x856=((1.0)*r00);
IkReal x857=(cj0*cj5*r10);
CheckValue<IkReal> x858=IKPowWithIntegerCheck(IKsign(((((-1.0)*x853*x856))+(((-1.0)*cj5*r01*x854))+(((-1.0)*x849*x850))+(((-1.0)*r10*x855)))),-1);
if(!x858.valid){
continue;
}
CheckValue<IkReal> x859 = IKatan2WithCheck(IkReal((((cj0*r12*x848))+((x851*x852))+(((-1.0)*r12*x851*x854))+(((-1.0)*x848*x852)))),IkReal((((x848*x857))+(((-1.0)*x848*x849*x856))+(((-1.0)*cj5*r10*x851*x854))+((r00*x849*x851))+(((-1.0)*r01*x851*x855))+((r11*x851*x853))+((r01*x848*x855))+(((-1.0)*x848*x850*x853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x858.value)))+(x859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x860=IKsin(j4);
IkReal x861=IKcos(j4);
IkReal x862=((1.0)*r12);
IkReal x863=(r11*sj5);
IkReal x864=(cj5*r00);
IkReal x865=(cj2*cj3);
IkReal x866=((1.0)*sj2);
IkReal x867=((1.0)*sj5);
IkReal x868=(cj5*r10);
IkReal x869=(cj5*r20);
IkReal x870=(r01*sj5);
IkReal x871=((1.0)*x861);
IkReal x872=(sj0*x860);
IkReal x873=(cj0*x860);
IkReal x874=(sj0*x861);
IkReal x875=(cj0*x861);
evalcond[0]=((((-1.0)*sj1*x866))+(((-1.0)*r21*x860*x867))+((x860*x869))+((cj1*cj2))+(((-1.0)*r22*x871)));
evalcond[1]=(((cj1*cj3*sj2))+((r22*x860))+(((-1.0)*r21*x861*x867))+((sj1*x865))+((x861*x869)));
evalcond[2]=(((x863*x873))+(((-1.0)*r02*sj0*x871))+((r12*x875))+(((-1.0)*x868*x873))+((x864*x872))+(((-1.0)*r01*x867*x872)));
evalcond[3]=(sj3+((x863*x875))+(((-1.0)*x862*x873))+((r02*x872))+((x864*x874))+(((-1.0)*r01*x867*x874))+(((-1.0)*cj0*x868*x871)));
evalcond[4]=(((x870*x873))+((x863*x872))+((r12*x874))+(((-1.0)*cj2*sj1))+((r02*x875))+(((-1.0)*x868*x872))+(((-1.0)*cj1*x866))+(((-1.0)*x864*x873)));
evalcond[5]=(((x870*x875))+((x863*x874))+(((-1.0)*x862*x872))+(((-1.0)*sj0*x868*x871))+((cj1*x865))+(((-1.0)*cj0*x864*x871))+(((-1.0)*r02*x873))+(((-1.0)*cj3*sj1*x866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x876=((1.0)*cj1);
IkReal x877=(sj0*sj1);
IkReal x878=(cj5*r11);
IkReal x879=(r10*sj5);
IkReal x880=(r20*sj5);
IkReal x881=(cj5*r21);
IkReal x882=(cj0*cj5*r01);
IkReal x883=(cj0*r00*sj5);
CheckValue<IkReal> x884=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x884.valid){
continue;
}
CheckValue<IkReal> x885 = IKatan2WithCheck(IkReal((((sj1*x882))+((sj1*x883))+((cj1*x881))+((cj1*x880))+((x877*x878))+((x877*x879)))),IkReal((((sj1*x880))+((sj1*x881))+(((-1.0)*sj0*x876*x878))+(((-1.0)*sj0*x876*x879))+(((-1.0)*x876*x882))+(((-1.0)*x876*x883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x885.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x884.value)))+(x885.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x886=IKsin(j2);
IkReal x887=IKcos(j2);
IkReal x888=((1.0)*sj0);
IkReal x889=(r10*sj5);
IkReal x890=((0.02)*sj3);
IkReal x891=(r20*sj5);
IkReal x892=((0.0445)*sj0);
IkReal x893=(cj5*r11);
IkReal x894=((1.0)*sj3);
IkReal x895=((1.0)*cj0);
IkReal x896=(cj5*r01);
IkReal x897=(cj5*r21);
IkReal x898=(sj1*x887);
IkReal x899=(sj1*x886);
IkReal x900=(cj0*r00*sj5);
IkReal x901=(cj1*x886);
IkReal x902=(cj1*x887);
evalcond[0]=((((-1.0)*x894*x901))+(((-1.0)*x894*x898))+x897+x891);
evalcond[1]=((((-1.0)*x895*x896))+(((-1.0)*x894*x902))+(((-1.0)*r00*sj5*x895))+((sj3*x899))+(((-1.0)*x888*x893))+(((-1.0)*x888*x889)));
evalcond[2]=((((0.0445)*x891))+(((0.0445)*x897))+((x890*x901))+(((-0.012)*x898))+(((-0.165)*cj1))+(((-0.1775)*x902))+(((0.1775)*x899))+pz+(((-0.012)*x901))+((x890*x898)));
evalcond[3]=((((-1.0)*x892*x893))+(((-0.0445)*cj0*x896))+((x890*x902))+(((-0.0445)*x900))+(((0.165)*sj1))+(((-1.0)*py*x888))+(((-1.0)*x889*x892))+(((0.012)*x899))+(((0.1775)*x898))+(((-0.012)*x902))+(((-1.0)*px*x895))+(((0.1775)*x901))+(((-1.0)*x890*x899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x903=((1.0)*sj0);
IkReal x904=((1.0)*cj0);
IkReal x905=((((-1.0)*cj5*r11*x903))+(((-1.0)*r10*sj5*x903))+(((-1.0)*cj5*r01*x904))+(((-1.0)*r00*sj5*x904)));
j4eval[0]=x905;
j4eval[1]=IKsign(x905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x906=r21*r21;
IkReal x907=cj5*cj5;
IkReal x908=((((2.0)*cj5*r20*r21*sj5))+((x906*x907))+(((-1.0)*x907*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x906)));
j4eval[0]=x908;
j4eval[1]=IKsign(x908);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x909=cj5*cj5;
IkReal x910=(cj0*r11);
IkReal x911=((1.0)*sj0);
IkReal x912=(cj0*r10);
IkReal x913=(cj5*r20*sj5);
IkReal x914=(r21*x909);
IkReal x915=(cj5*r21*sj5);
IkReal x916=(r20*x909);
IkReal x917=(((r00*sj0*x916))+((x910*x913))+((x910*x914))+(((-1.0)*x912*x916))+(((-1.0)*r00*x911*x915))+((r01*r21*sj0))+(((-1.0)*r21*x910))+(((-1.0)*cj0*r12*r22))+((x912*x915))+(((-1.0)*r01*x911*x914))+(((-1.0)*r01*x911*x913))+((r02*r22*sj0)));
j4eval[0]=x917;
j4eval[1]=IKsign(x917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x918=cj5*cj5;
IkReal x919=((1.0)*sj5);
IkReal x920=(cj5*r10);
IkReal x921=(cj0*r11);
IkReal x922=((1.0)*cj0);
IkReal x923=(r02*sj0);
IkReal x924=((1.0)*r01*sj0);
IkReal x925=(r21*x918);
IkReal x926=(cj5*r20*sj5);
IkReal x927=(cj5*r00*sj0);
IkReal x928=(cj1*cj3*sj2);
IkReal x929=(cj2*cj3*sj1);
IkReal x930=(r01*sj0*sj5);
IkReal x931=(r20*x918);
IkReal x932=(cj0*x929);
CheckValue<IkReal> x933 = IKatan2WithCheck(IkReal(((((-1.0)*x923*x929))+(((-1.0)*x923*x928))+((r12*x932))+((cj0*r12*x928)))),IkReal(((((-1.0)*x927*x928))+(((-1.0)*x927*x929))+((cj0*x920*x928))+((x920*x932))+((x928*x930))+(((-1.0)*x919*x921*x928))+(((-1.0)*x919*x921*x929))+((x929*x930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x933.valid){
continue;
}
CheckValue<IkReal> x934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x921))+((r22*x923))+(((-1.0)*x924*x925))+((x921*x925))+((x921*x926))+(((-1.0)*r12*r22*x922))+((r01*r21*sj0))+(((-1.0)*r21*x919*x927))+((cj0*r21*sj5*x920))+(((-1.0)*cj5*r01*r20*sj0*x919))+(((-1.0)*r10*x922*x931))+((r00*sj0*x931)))),-1);
if(!x934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x933.value)+(((1.5707963267949)*(x934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x935=IKsin(j4);
IkReal x936=IKcos(j4);
IkReal x937=((1.0)*r12);
IkReal x938=(r11*sj5);
IkReal x939=(cj5*r00);
IkReal x940=(cj2*cj3);
IkReal x941=((1.0)*sj2);
IkReal x942=((1.0)*sj5);
IkReal x943=(cj5*r10);
IkReal x944=(cj5*r20);
IkReal x945=(r01*sj5);
IkReal x946=((1.0)*x936);
IkReal x947=(sj0*x935);
IkReal x948=(cj0*x935);
IkReal x949=(sj0*x936);
IkReal x950=(cj0*x936);
evalcond[0]=(((x935*x944))+((cj1*cj2))+(((-1.0)*r22*x946))+(((-1.0)*sj1*x941))+(((-1.0)*r21*x935*x942)));
evalcond[1]=(((cj1*cj3*sj2))+((r22*x935))+((x936*x944))+((sj1*x940))+(((-1.0)*r21*x936*x942)));
evalcond[2]=((((-1.0)*x943*x948))+(((-1.0)*r01*x942*x947))+((x938*x948))+((x939*x947))+((r12*x950))+(((-1.0)*r02*sj0*x946)));
evalcond[3]=((((-1.0)*r01*x942*x949))+sj3+((r02*x947))+((x939*x949))+(((-1.0)*cj0*x943*x946))+((x938*x950))+(((-1.0)*x937*x948)));
evalcond[4]=((((-1.0)*x943*x947))+(((-1.0)*cj1*x941))+((x945*x948))+(((-1.0)*cj2*sj1))+(((-1.0)*x939*x948))+((r12*x949))+((x938*x947))+((r02*x950)));
evalcond[5]=(((x938*x949))+(((-1.0)*r02*x948))+(((-1.0)*sj0*x943*x946))+((cj1*x940))+((x945*x950))+(((-1.0)*x937*x947))+(((-1.0)*cj0*x939*x946))+(((-1.0)*cj3*sj1*x941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x951=r21*r21;
IkReal x952=cj5*cj5;
IkReal x953=(sj1*sj2);
IkReal x954=(r21*sj5);
IkReal x955=(cj1*cj2);
IkReal x956=(cj5*r20);
IkReal x957=((1.0)*cj3);
IkReal x958=(cj1*sj2);
IkReal x959=(cj2*sj1);
IkReal x960=(cj3*r22);
CheckValue<IkReal> x961 = IKatan2WithCheck(IkReal((((x955*x956))+((x959*x960))+(((-1.0)*x954*x955))+((x958*x960))+(((-1.0)*x953*x956))+((x953*x954)))),IkReal((((r22*x953))+(((-1.0)*r22*x955))+((cj3*x956*x958))+((cj3*x956*x959))+(((-1.0)*x954*x957*x958))+(((-1.0)*x954*x957*x959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x961.valid){
continue;
}
CheckValue<IkReal> x962=IKPowWithIntegerCheck(IKsign((((x951*x952))+(((2.0)*x954*x956))+(((-1.0)*x951))+(((-1.0)*(r22*r22)))+(((-1.0)*x952*(r20*r20))))),-1);
if(!x962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x961.value)+(((1.5707963267949)*(x962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x963=IKsin(j4);
IkReal x964=IKcos(j4);
IkReal x965=((1.0)*r12);
IkReal x966=(r11*sj5);
IkReal x967=(cj5*r00);
IkReal x968=(cj2*cj3);
IkReal x969=((1.0)*sj2);
IkReal x970=((1.0)*sj5);
IkReal x971=(cj5*r10);
IkReal x972=(cj5*r20);
IkReal x973=(r01*sj5);
IkReal x974=((1.0)*x964);
IkReal x975=(sj0*x963);
IkReal x976=(cj0*x963);
IkReal x977=(sj0*x964);
IkReal x978=(cj0*x964);
evalcond[0]=((((-1.0)*r21*x963*x970))+((x963*x972))+(((-1.0)*sj1*x969))+((cj1*cj2))+(((-1.0)*r22*x974)));
evalcond[1]=(((cj1*cj3*sj2))+(((-1.0)*r21*x964*x970))+((sj1*x968))+((x964*x972))+((r22*x963)));
evalcond[2]=((((-1.0)*r01*x970*x975))+(((-1.0)*x971*x976))+((x966*x976))+((r12*x978))+(((-1.0)*r02*sj0*x974))+((x967*x975)));
evalcond[3]=((((-1.0)*r01*x970*x977))+(((-1.0)*x965*x976))+sj3+(((-1.0)*cj0*x971*x974))+((x966*x978))+((x967*x977))+((r02*x975)));
evalcond[4]=((((-1.0)*x967*x976))+(((-1.0)*cj1*x969))+(((-1.0)*cj2*sj1))+((x973*x976))+(((-1.0)*x971*x975))+((x966*x975))+((r12*x977))+((r02*x978)));
evalcond[5]=((((-1.0)*x965*x975))+(((-1.0)*r02*x976))+(((-1.0)*cj3*sj1*x969))+((cj1*x968))+(((-1.0)*cj0*x967*x974))+((x973*x978))+((x966*x977))+(((-1.0)*sj0*x971*x974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x979=(cj1*cj2);
IkReal x980=(cj5*sj0);
IkReal x981=((1.0)*r11);
IkReal x982=(sj1*sj2);
IkReal x983=(r02*sj0);
IkReal x984=(cj0*sj5);
IkReal x985=((1.0)*cj0);
IkReal x986=(sj0*sj5);
IkReal x987=((1.0)*r00);
IkReal x988=(cj0*cj5*r10);
CheckValue<IkReal> x989 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x982*x985))+(((-1.0)*x979*x983))+((x982*x983))+((cj0*r12*x979)))),IkReal((((r01*x979*x986))+(((-1.0)*cj5*r10*x982*x985))+(((-1.0)*r01*x982*x986))+((x979*x988))+((r11*x982*x984))+((r00*x980*x982))+(((-1.0)*x979*x981*x984))+(((-1.0)*x979*x980*x987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x989.valid){
continue;
}
CheckValue<IkReal> x990=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01*x985))+(((-1.0)*r10*x986))+(((-1.0)*x984*x987))+(((-1.0)*x980*x981)))),-1);
if(!x990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x989.value)+(((1.5707963267949)*(x990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x991=IKsin(j4);
IkReal x992=IKcos(j4);
IkReal x993=((1.0)*r12);
IkReal x994=(r11*sj5);
IkReal x995=(cj5*r00);
IkReal x996=(cj2*cj3);
IkReal x997=((1.0)*sj2);
IkReal x998=((1.0)*sj5);
IkReal x999=(cj5*r10);
IkReal x1000=(cj5*r20);
IkReal x1001=(r01*sj5);
IkReal x1002=((1.0)*x992);
IkReal x1003=(sj0*x991);
IkReal x1004=(cj0*x991);
IkReal x1005=(sj0*x992);
IkReal x1006=(cj0*x992);
evalcond[0]=(((x1000*x991))+(((-1.0)*sj1*x997))+(((-1.0)*r21*x991*x998))+((cj1*cj2))+(((-1.0)*r22*x1002)));
evalcond[1]=(((x1000*x992))+((cj1*cj3*sj2))+((r22*x991))+((sj1*x996))+(((-1.0)*r21*x992*x998)));
evalcond[2]=(((x1003*x995))+(((-1.0)*r01*x1003*x998))+(((-1.0)*x1004*x999))+((x1004*x994))+((r12*x1006))+(((-1.0)*r02*sj0*x1002)));
evalcond[3]=(sj3+(((-1.0)*cj0*x1002*x999))+((r02*x1003))+(((-1.0)*r01*x1005*x998))+(((-1.0)*x1004*x993))+((x1005*x995))+((x1006*x994)));
evalcond[4]=(((r02*x1006))+((x1003*x994))+(((-1.0)*cj2*sj1))+(((-1.0)*x1004*x995))+(((-1.0)*x1003*x999))+((r12*x1005))+((x1001*x1004))+(((-1.0)*cj1*x997)));
evalcond[5]=((((-1.0)*cj0*x1002*x995))+((cj1*x996))+(((-1.0)*x1003*x993))+(((-1.0)*cj3*sj1*x997))+(((-1.0)*r02*x1004))+((x1005*x994))+(((-1.0)*sj0*x1002*x999))+((x1001*x1006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - cobotta_r (ed31895b9fd22147d119aa38b120d0c6)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
